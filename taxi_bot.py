# –§—É–Ω–∫—Ü–∏—è driver_arrived_callback –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∏–∂–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è bot

import telebot
import logging
import os
import sys
import sqlite3
import json
import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
from config import BOT_TOKEN, ADMIN_ID, ADMIN_IDS, POPULAR_DESTINATIONS, CITY_NAME, CITY_RADIUS, DRIVER_STATUSES

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if user_id in ADMIN_IDS:
        return True
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT 1 FROM admins WHERE user_id = ?', (user_id,))
        exists = cursor.fetchone() is not None
        conn.close()
        return exists
    except Exception:
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
def send_to_admins(text, parse_mode=None, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    for admin_id in ADMIN_IDS:
        try:
            bot.send_message(admin_id, text, parse_mode=parse_mode, reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
def send_photo_to_admins(photo, caption=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    for admin_id in ADMIN_IDS:
        try:
            bot.send_photo(admin_id, photo, caption=caption)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
def init_db():
    conn = sqlite3.connect('taxi.db')
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER UNIQUE NOT NULL,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        phone_number TEXT,
        registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤–æ–¥–∏—Ç–µ–ª–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS drivers (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER UNIQUE NOT NULL,
        first_name TEXT NOT NULL,
        license_number TEXT NOT NULL,
        car_registration TEXT NOT NULL,
        car_number TEXT NOT NULL,
        car_photos TEXT,
        status TEXT DEFAULT 'OFF_DUTY',
        is_approved INTEGER DEFAULT 0,
        registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS orders (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        client_id INTEGER,
        driver_id INTEGER,
        from_address TEXT NOT NULL,
        to_address TEXT NOT NULL,
        scheduled_at TEXT,
        payment_method TEXT,
        comment TEXT,
        price REAL,
        counter_offer REAL,
        status TEXT DEFAULT 'NEW',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        completed_at TIMESTAMP,
        FOREIGN KEY (client_id) REFERENCES users (id),
        FOREIGN KEY (driver_id) REFERENCES drivers (id)
    )
    ''')
    
    # –ú–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü payment_method, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ë–î)
    try:
        cursor.execute("PRAGMA table_info(orders)")
        cols = [row[1] for row in cursor.fetchall()]
        if 'payment_method' not in cols:
            cursor.execute('ALTER TABLE orders ADD COLUMN payment_method TEXT')
        if 'scheduled_at' not in cols:
            cursor.execute('ALTER TABLE orders ADD COLUMN scheduled_at TEXT')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ orders.payment_method: {e}")
    
    # –¢–∞–±–ª–∏—Ü–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS admins (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER UNIQUE NOT NULL,
        first_name TEXT,
        added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –æ—Ç–∑—ã–≤–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS reviews (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        order_id INTEGER UNIQUE,
        client_id INTEGER,
        driver_id INTEGER,
        rating INTEGER NOT NULL,
        comment TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (order_id) REFERENCES orders (id),
        FOREIGN KEY (client_id) REFERENCES users (id),
        FOREIGN KEY (driver_id) REFERENCES drivers (id)
    )
    ''')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∑–∞—Ä–∞–±–æ—Ç–∫–∞
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS earnings (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        driver_id INTEGER,
        order_id INTEGER UNIQUE,
        amount REAL NOT NULL,
        date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (driver_id) REFERENCES drivers (id),
        FOREIGN KEY (order_id) REFERENCES orders (id)
    )
    ''')
    
    conn.commit()
    conn.close()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    conn = sqlite3.connect('taxi.db')
    conn.row_factory = sqlite3.Row
    return conn

def save_user_data(user_id, username, first_name, last_name):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    cursor.execute('SELECT id FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    
    if not user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute(
            'INSERT INTO users (user_id, username, first_name, last_name) VALUES (?, ?, ?, ?)',
            (user_id, username, first_name, last_name)
        )
        conn.commit()
        cursor.execute('SELECT id FROM users WHERE user_id = ?', (user_id,))
        user = cursor.fetchone()
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute(
            'UPDATE users SET username = ?, first_name = ?, last_name = ? WHERE user_id = ?',
            (username, first_name, last_name, user_id)
        )
        conn.commit()
    
    user_id = user['id']
    conn.close()
    return user_id

def get_user_by_id(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    conn.close()
    return user

def get_driver_by_id(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM drivers WHERE user_id = ?', (user_id,))
    driver = cursor.fetchone()
    conn.close()
    return driver

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def get_main_keyboard():
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(telebot.types.KeyboardButton("üöï –ó–∞–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Ç–∞–∫—Å–∏"))
    markup.add(telebot.types.KeyboardButton("üìù –ú–æ–∏ –∑–∞–∫–∞–∑—ã"), telebot.types.KeyboardButton("ü§ù –°—Ç–∞—Ç—å –Ω–∞—à–∏–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º"))
    markup.add(telebot.types.KeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏"))
    return markup

def get_admin_keyboard():
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(telebot.types.KeyboardButton("üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã"))
    markup.add(telebot.types.KeyboardButton("üë®‚Äç‚úàÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏"), telebot.types.KeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤"))
    markup.add(telebot.types.KeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), telebot.types.KeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑—ã"))
    markup.add(telebot.types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"))
    markup.add(telebot.types.KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return markup

def get_driver_keyboard():
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(telebot.types.KeyboardButton("üöó –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å"), telebot.types.KeyboardButton("üìç –ù–∞ –º–µ—Å—Ç–µ"))
    markup.add(telebot.types.KeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã"), telebot.types.KeyboardButton("üí∞ –ú–æ–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫"))
    markup.add(telebot.types.KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return markup

def get_popular_destinations_keyboard():
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    for destination in POPULAR_DESTINATIONS:
        markup.add(telebot.types.KeyboardButton(destination))
    markup.add(telebot.types.KeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å"))
    markup.add(telebot.types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    return markup

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN, parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data.startswith("driver_arrived:"))
def driver_arrived_callback(call):
    parts = call.data.split(":")
    if len(parts) != 2:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    order_id = int(parts[1])
    user_id = call.from_user.id
    
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM orders WHERE id = ?', (order_id,))
    order = cursor.fetchone()
    if not order:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        conn.close()
        return
    
    driver = get_driver_by_id(user_id)
    if not driver or driver['id'] != order['driver_id']:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –≤–∞—Å")
        conn.close()
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–¥–∏—Ç–µ–ª—è –Ω–∞ ARRIVED
    cursor.execute('UPDATE drivers SET status = ? WHERE id = ?', ('ARRIVED', driver['id']))
    conn.commit()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ –ø—Ä–∏–±—ã—Ç–∏–∏
    cursor.execute('SELECT user_id FROM users WHERE id = ?', (order['client_id'],))
    client = cursor.fetchone()
    client_user_id = client['user_id'] if client else None
    conn.close()
    
    # –°–Ω–∏–º–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–µ–∂–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)
    
    if client_user_id:
        try:
            bot.send_message(client_user_id, "üöó –í–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–±—ã–ª –Ω–∞ —Ç–æ—á–∫—É –ê. –ü–æ–¥—Ö–æ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –æ –ø—Ä–∏–±—ã—Ç–∏–∏: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–µ–∑–¥–∫–∏ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω", callback_data=f"complete_order:{order_id}"))
    bot.send_message(call.message.chat.id, "‚ñ∂Ô∏è –ü–æ–µ–∑–¥–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å. –ù–∞–∂–º–∏—Ç–µ, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω.", reply_markup=markup)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
user_order_data = {}
driver_registration_data = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    save_user_data(user_id, username, first_name, last_name)
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.send_message(
        message.chat.id,
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢–∞–∫—Å–∏ –°–≤–µ—Ç–ª–æ–≥–æ—Ä—Å–∫39, {first_name}!\n\n"
        f"–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏ –≤ –°–≤–µ—Ç–ª–æ–≥–æ—Ä—Å–∫–µ –∏ –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç—è—Ö.",
        reply_markup=get_main_keyboard()
    )

@bot.message_handler(commands=['help'])
def help_command(message):
    bot.send_message(
        message.chat.id,
        "üöï <b>–¢–∞–∫—Å–∏ –°–≤–µ—Ç–ª–æ–≥–æ—Ä—Å–∫39</b> - –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ —Ç–∞–∫—Å–∏\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "/order - –ó–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏\n"
        "/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/driver - –ú–µ–Ω—é –≤–æ–¥–∏—Ç–µ–ª—è\n"
        "/admin - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)\n\n"
        "–î–ª—è –∑–∞–∫–∞–∑–∞ —Ç–∞–∫—Å–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏' –≤ –º–µ–Ω—é.",
        parse_mode="HTML"
    )

@bot.message_handler(commands=['admin'])
def admin_command(message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not is_admin(user_id):
        bot.send_message(
            message.chat.id,
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏."
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    bot.send_message(
        message.chat.id,
        "üëë <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=get_admin_keyboard()
    )

@bot.message_handler(commands=['order'])
@bot.message_handler(func=lambda message: message.text == "üöï –ó–∞–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Ç–∞–∫—Å–∏")
def order_taxi(message):
    user_id = message.from_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    save_user_data(
        user_id,
        message.from_user.username,
        message.from_user.first_name,
        message.from_user.last_name
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    user_order_data[user_id] = {}
    
    # –ù–æ–≤—ã–π —à–∞–≥: –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
    bot.send_message(
        message.chat.id,
        "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø–æ–¥–∞—á–∏ —Ç–∞–∫—Å–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10.09 14:30):",
        reply_markup=None
    )
    bot.register_next_step_handler(message, process_schedule_datetime)

def process_schedule_datetime(message):
    user_id = message.from_user.id
    text = message.text.strip()
    # –ü—Ä–∏–º–µ–º —Ñ–æ—Ä–º–∞—Ç DD.MM HH:MM
    try:
        # –ü–æ–¥—Å—Ç–∞–≤–∏–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥
        now = datetime.datetime.now()
        day, rest = text.split('.')
        month, time_part = rest.split(' ')
        hours, minutes = time_part.split(':')
        dt = datetime.datetime(year=now.year, month=int(month), day=int(day), hour=int(hours), minute=int(minutes))
        if dt < now:
            raise ValueError('past')
    except Exception:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 10.09 14:30. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        bot.register_next_step_handler(message, process_schedule_datetime)
        return
    
    user_order_data.setdefault(user_id, {})['scheduled_at'] = dt.isoformat()
    
    # –î–∞–ª–µ–µ —Ç–æ—á–∫–∞ –ê: —Ç–æ–ª—å–∫–æ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥
    bot.send_message(message.chat.id, "–¢–æ—á–∫–∞ –ê –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –°–≤–µ—Ç–ª–æ–≥–æ—Ä—Å–∫–µ (–∏ 10 –∫–º). –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å:")
    bot.register_next_step_handler(message, process_manual_from_address)

def process_preorder_destination(message):
    user_id = message.from_user.id
    if message.text == "üîô –ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–∞.", reply_markup=get_main_keyboard())
        return
    
    if message.text not in POPULAR_DESTINATIONS:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        bot.register_next_step_handler(message, process_preorder_destination)
        return
    
    user_order_data[user_id]['to_address'] = message.text
    
    # –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Ç–æ—á–∫–∞ –ê) –≤—Ä—É—á–Ω—É—é
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—É–ª–∏—Ü–∞ –∏ –¥–æ–º):", reply_markup=None)
    bot.register_next_step_handler(message, process_preorder_from_address)

def process_preorder_from_address(message):
    user_id = message.from_user.id
    from_address = message.text.strip()
    if not from_address:
        bot.send_message(message.chat.id, "–ê–¥—Ä–µ—Å –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        bot.register_next_step_handler(message, process_preorder_from_address)
        return
    
    if CITY_NAME.lower() not in from_address.lower():
        bot.send_message(message.chat.id, "–¢–æ—á–∫–∞ –ê –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –°–≤–µ—Ç–ª–æ–≥–æ—Ä—Å–∫–µ (–∏ 10 –∫–º). –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å:")
        bot.register_next_step_handler(message, process_preorder_from_address)
        return
    
    user_order_data[user_id]['from_address'] = from_address
    
    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    bot.send_message(message.chat.id, "–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ):")
    bot.register_next_step_handler(message, process_preorder_comment)

def process_preorder_comment(message):
    user_id = message.from_user.id
    comment = message.text.strip()
    if comment == '-':
        comment = None
    user_order_data[user_id]['comment'] = comment
    
    # –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(telebot.types.KeyboardButton("üíµ –ù–∞–ª–∏—á–Ω—ã–µ"), telebot.types.KeyboardButton("üí≥ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=markup)
    bot.register_next_step_handler(message, process_preorder_payment)

def process_preorder_payment(message):
    user_id = message.from_user.id
    pm = message.text
    if pm not in ["üíµ –ù–∞–ª–∏—á–Ω—ã–µ", "üí≥ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É"]:
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã.")
        bot.register_next_step_handler(message, process_preorder_payment)
        return
    
    payment_method = 'CASH' if pm == "üíµ –ù–∞–ª–∏—á–Ω—ã–µ" else 'CARD'
    user_order_data[user_id]['payment_method'] = payment_method
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    data = user_order_data[user_id]
    text = (
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥–∑–∞–∫–∞–∑–∞:\n\n"
        f"–û—Ç–∫—É–¥–∞: {data['from_address']}\n"
        f"–ö—É–¥–∞: {data['to_address']}\n"
        f"–ö–æ–≥–¥–∞: {datetime.datetime.fromisoformat(data['scheduled_at']).strftime('%d.%m %H:%M')}\n"
        f"–û–ø–ª–∞—Ç–∞: {'–ù–∞–ª–∏—á–Ω—ã–µ' if payment_method=='CASH' else '–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É'}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment') or '‚Äî'}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑?"
    )
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_preorder"),
        telebot.types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_preorder")
    )
    bot.send_message(message.chat.id, text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in ("confirm_preorder","cancel_preorder"))
def confirm_preorder_callback(call):
    user_id = call.from_user.id
    if call.data == 'cancel_preorder':
        bot.edit_message_text("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.", call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.", reply_markup=get_main_keyboard())
        user_order_data.pop(user_id, None)
        return
    
    data = user_order_data.get(user_id)
    if not data:
        bot.answer_callback_query(call.id, "–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT id FROM users WHERE user_id = ?', (user_id,))
    u = cursor.fetchone()
    if not u:
        conn.close()
        bot.answer_callback_query(call.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    cursor.execute('SELECT COUNT(*) FROM orders WHERE client_id = ?', (u['id'],))
    client_order_number = cursor.fetchone()[0] + 1
    
    cursor.execute(
        'INSERT INTO orders (client_id, from_address, to_address, payment_method, comment, status, scheduled_at) VALUES (?,?,?,?,?,?,?)',
        (u['id'], data['from_address'], data['to_address'], data.get('payment_method'), data.get('comment'), 'NEW', data.get('scheduled_at'))
    )
    conn.commit()
    order_id = cursor.lastrowid
    conn.close()
    
    bot.edit_message_text(
        f"‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ #{client_order_number} —Å–æ–∑–¥–∞–Ω. –û–∂–∏–¥–∞–π—Ç–µ —Ü–µ–Ω—ã.",
        call.message.chat.id,
        call.message.message_id
    )
    bot.send_message(call.message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())
    
    # –ê–¥–º–∏–Ω–∞–º
    admin_text = (
        f"üÜï <b>–ù–æ–≤—ã–π –ø—Ä–µ–¥–∑–∞–∫–∞–∑ #{client_order_number}</b> (ID: {order_id})\n\n"
        f"–û—Ç–∫—É–¥–∞: {data['from_address']}\n"
        f"–ö—É–¥–∞: {data['to_address']}\n"
        f"–ö–æ–≥–¥–∞: {datetime.datetime.fromisoformat(data['scheduled_at']).strftime('%d.%m %H:%M')}\n"
        f"–û–ø–ª–∞—Ç–∞: {'–ù–∞–ª–∏—á–Ω—ã–µ' if data.get('payment_method')=='CASH' else '–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É'}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment') or '‚Äî'}"
    )
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"set_price:{order_id}"))
    send_to_admins(admin_text, parse_mode="HTML", reply_markup=markup)
    
    user_order_data.pop(user_id, None)

def process_from_address(message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–ù–∞–∑–∞–¥"
    if message.text == "üîô –ù–∞–∑–∞–¥":
        bot.send_message(
            message.chat.id,
            "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=get_main_keyboard()
        )
        return
    
    if message.text == "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –≤—Ä—É—á–Ω—É—é
        bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=None
        )
        bot.register_next_step_handler(message, process_manual_from_address)
        return
        
    else:
        from_address = message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥—Ä–µ—Å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≥–æ—Ä–æ–¥–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        if CITY_NAME.lower() not in from_address.lower():
            markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            markup.add(telebot.types.KeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é"))
            markup.add(telebot.types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
            
            bot.send_message(
                message.chat.id,
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –∑–æ–Ω—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.\n"
                "–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –≥. –°–≤–µ—Ç–ª–æ–≥–æ—Ä—Å–∫ –∏ –≤ —Ä–∞–¥–∏—É—Å–µ 10 –∫–º.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=markup
            )
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
            bot.register_next_step_handler(message, process_from_address)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        user_order_data[user_id]['from_address'] = from_address
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    for destination in POPULAR_DESTINATIONS:
        markup.add(telebot.types.KeyboardButton(destination))
    markup.add(telebot.types.KeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å"))
    markup.add(telebot.types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    
    bot.send_message(
        message.chat.id,
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (—Ç–æ—á–∫–∞ –ë):",
        reply_markup=markup
    )
    bot.register_next_step_handler(message, process_to_address)

def process_manual_from_address(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    user_id = message.from_user.id
    from_address = message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥—Ä–µ—Å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≥–æ—Ä–æ–¥–∞
    if CITY_NAME.lower() not in from_address.lower():
        bot.send_message(
            message.chat.id,
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –∑–æ–Ω—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
        )
        bot.register_next_step_handler(message, process_manual_from_address)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    user_order_data[user_id]['from_address'] = from_address
    
    # –¢–µ–ø–µ—Ä—å –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç–æ—á–∫–∏ –ë
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    for destination in POPULAR_DESTINATIONS:
        markup.add(telebot.types.KeyboardButton(destination))
    markup.add(telebot.types.KeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å"))
    markup.add(telebot.types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (—Ç–æ—á–∫–∞ –ë) –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å:", reply_markup=markup)
    bot.register_next_step_handler(message, process_to_address)

def process_to_address(message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–ù–∞–∑–∞–¥"
    if message.text == "üîô –ù–∞–∑–∞–¥":
        order_taxi(message)
        return
    
    if message.text == "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å":
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:",
            reply_markup=None
        )
        bot.register_next_step_handler(message, process_custom_to_address)
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞
    if message.text in POPULAR_DESTINATIONS:
        to_city = message.text
        user_order_data[user_id]['to_city'] = to_city
        
        # –î–ª—è –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å - –æ–Ω –æ–¥–∏–Ω
        if "–ê—ç—Ä–æ–ø–æ—Ä—Ç" in message.text:
            user_order_data[user_id]['to_address'] = message.text
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
            bot.send_message(message.chat.id, "–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ). –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-':", reply_markup=None)
            bot.register_next_step_handler(message, process_preorder_comment)
            return
        
        bot.send_message(
            message.chat.id,
            f"–í–≤–µ–¥–∏—Ç–µ —É–ª–∏—Ü—É –∏ –¥–æ–º –≤ –ø—É–Ω–∫—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è ({to_city}):",
            reply_markup=None
        )
        bot.register_next_step_handler(message, process_to_city_street)
        return
    
    # –ò–Ω–∞—á–µ –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å.")
    bot.register_next_step_handler(message, process_to_address)
    return
    
    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    bot.send_message(message.chat.id, "–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ). –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-':", reply_markup=None)
    bot.register_next_step_handler(message, process_preorder_comment)

def process_custom_to_address(message):
    user_id = message.from_user.id
    to_address = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    user_order_data[user_id]['to_address'] = to_address
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É
    bot.send_message(
        message.chat.id,
        "–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).\n"
        "–ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω—É–∂–µ–Ω, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-':",
        reply_markup=None
    )
    bot.register_next_step_handler(message, process_preorder_comment)

def process_to_city_street(message):
    user_id = message.from_user.id
    street = message.text.strip()
    to_city = user_order_data.get(user_id, {}).get('to_city')
    if not to_city:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—ã–±–æ—Ä.")
        # –í–µ—Ä–Ω–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        for destination in POPULAR_DESTINATIONS:
            markup.add(telebot.types.KeyboardButton(destination))
        markup.add(telebot.types.KeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å"))
        markup.add(telebot.types.KeyboardButton("üîô –ù–∞–∑–∞–¥"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (—Ç–æ—á–∫–∞ –ë) –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å:", reply_markup=markup)
        bot.register_next_step_handler(message, process_to_address)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    to_address = f"{to_city}, {street}"
    user_order_data[user_id]['to_address'] = to_address
    
    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    bot.send_message(message.chat.id, "–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ). –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-':", reply_markup=None)
    bot.register_next_step_handler(message, process_preorder_comment)

def process_comment(message):
    user_id = message.from_user.id
    comment = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
    if comment and comment != '-':
        user_order_data[user_id]['comment'] = comment
    else:
        user_order_data[user_id]['comment'] = None
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    from_address = user_order_data[user_id]['from_address']
    to_address = user_order_data[user_id]['to_address']
    comment_text = user_order_data[user_id].get('comment', None)
    
    confirmation_text = f"üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:</b>\n\n"
    confirmation_text += f"üìç <b>–û—Ç–∫—É–¥–∞:</b> {from_address}\n"
    confirmation_text += f"üèÅ <b>–ö—É–¥–∞:</b> {to_address}\n"
    
    if comment_text:
        confirmation_text += f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment_text}\n"
    
    confirmation_text += "\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order"),
        telebot.types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")
    )
    
    bot.send_message(
        message.chat.id,
        confirmation_text,
        parse_mode="HTML",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "confirm_order")
def confirm_order_callback(call):
    user_id = call.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
    if user_id not in user_order_data:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    order_data = user_order_data[user_id]
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    user = get_user_by_id(user_id)
    if not user:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ —É –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    cursor.execute('SELECT COUNT(*) FROM orders WHERE client_id = ?', (user['id'],))
    client_orders_count = cursor.fetchone()[0]
    client_order_number = client_orders_count + 1
    
    cursor.execute(
        '''INSERT INTO orders (client_id, from_address, to_address, comment, status)
           VALUES (?, ?, ?, ?, ?)''',
        (user['id'], order_data['from_address'], order_data['to_address'], order_data.get('comment'), 'NEW')
    )
    
    conn.commit()
    order_id = cursor.lastrowid
    conn.close()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"‚úÖ –ó–∞–∫–∞–∑ #{client_order_number} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É.\n\n"
             f"–û–∂–∏–¥–∞–π—Ç–µ, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ —Ü–µ–Ω–∞ –ø–æ–µ–∑–¥–∫–∏.",
        reply_markup=None
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    bot.send_message(
        call.message.chat.id,
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.",
        reply_markup=get_main_keyboard()
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    admin_text = f"üÜï <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{client_order_number}</b> (ID: {order_id})\n\n"
    admin_text += f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {call.from_user.first_name} {call.from_user.last_name or ''}\n"
    admin_text += f"üìç <b>–û—Ç–∫—É–¥–∞:</b> {order_data['from_address']}\n"
    admin_text += f"üèÅ <b>–ö—É–¥–∞:</b> {order_data['to_address']}\n"
    
    if order_data.get('comment'):
        admin_text += f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {order_data['comment']}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω—ã
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"set_price:{order_id}"))
    
    send_to_admins(
        admin_text,
        parse_mode="HTML",
        reply_markup=markup
    )
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if user_id in user_order_data:
        del user_order_data[user_id]

@bot.callback_query_handler(func=lambda call: call.data == "cancel_order")
def cancel_order_callback(call):
    user_id = call.from_user.id
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if user_id in user_order_data:
        del user_order_data[user_id]
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.",
        reply_markup=None
    )
    
    bot.send_message(
        call.message.chat.id,
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_main_keyboard()
    )

@bot.message_handler(func=lambda message: message.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏")
def contact_us(message):
    bot.send_message(
        message.chat.id,
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\n\n"
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX\n"
        "üìß Email: taxi@svetlogorsk39.ru\n"
        "üåê –°–∞–π—Ç: svetlogorsk39-taxi.ru"
    )

@bot.message_handler(func=lambda message: message.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def back_to_main_menu(message):
    bot.send_message(
        message.chat.id,
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫
@bot.message_handler(func=lambda message: message.text == "üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã")
def active_orders(message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–Ω—É—Ç—Ä–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞, —á—Ç–æ–±—ã —Å–æ–±—ã—Ç–∏–µ —Ç–æ—á–Ω–æ –¥–æ—Ö–æ–¥–∏–ª–æ
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT o.*, u.first_name, u.last_name, u.username
        FROM orders o
        JOIN users u ON o.client_id = u.id
        WHERE o.status IN ('NEW', 'PRICE_OFFERED', 'ACCEPTED', 'IN_PROGRESS')
        ORDER BY o.created_at DESC
    ''')
    
    orders = cursor.fetchall()
    conn.close()
    
    if not orders:
        bot.send_message(
            message.chat.id,
            "–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.",
            reply_markup=get_admin_keyboard()
        )
        return
    
    for order in orders:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM orders WHERE client_id = ? AND id <= ?', (order['client_id'], order['id']))
        client_order_number = cursor.fetchone()[0]
        conn.close()
        
        order_text = f"üöï <b>–ó–∞–∫–∞–∑ #{client_order_number}</b> (ID: {order['id']})\n\n"
        order_text += f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order['first_name']} {order['last_name'] or ''}\n"
        order_text += f"üìç <b>–û—Ç–∫—É–¥–∞:</b> {order['from_address']}\n"
        order_text += f"üèÅ <b>–ö—É–¥–∞:</b> {order['to_address']}\n"
        
        if order['comment']:
            order_text += f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {order['comment']}\n"
        
        if order['price']:
            order_text += f"üí∞ <b>–¶–µ–Ω–∞:</b> {order['price']} —Ä—É–±.\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∞–¥–º–∏–Ω–∞
        if order.get('scheduled_at'):
            try:
                scheduled_time = datetime.datetime.fromisoformat(order['scheduled_at']).strftime('%d.%m %H:%M')
                order_text += f"üïê <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è:</b> {scheduled_time}\n"
            except:
                pass
        
        status_map = {
            "NEW": "–ù–æ–≤—ã–π",
            "PRICE_OFFERED": "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ —Ü–µ–Ω–∞", 
            "ACCEPTED": "–ü—Ä–∏–Ω—è—Ç",
            "IN_PROGRESS": "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"
        }
        order_text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_map.get(order['status'], order['status'])}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        markup = telebot.types.InlineKeyboardMarkup()
        
        if order['status'] == 'NEW':
            markup.add(telebot.types.InlineKeyboardButton("üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"set_price:{order['id']}"))
        elif order['status'] == 'ACCEPTED':
            markup.add(telebot.types.InlineKeyboardButton("üöï –ù–∞–∑–Ω–∞—á–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è", callback_data=f"assign_driver:{order['id']}"))
        
        bot.send_message(
            message.chat.id,
            order_text,
            parse_mode="HTML",
            reply_markup=markup
        )

@bot.message_handler(func=lambda message: message.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" and is_admin(message.from_user.id))
def show_statistics(message):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
    cursor.execute('SELECT COUNT(*) FROM orders')
    total_orders = cursor.fetchone()[0]
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    cursor.execute('SELECT COUNT(*) FROM orders WHERE status = "COMPLETED"')
    completed_orders = cursor.fetchone()[0]
    
    # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    cursor.execute('SELECT COUNT(*) FROM orders WHERE status IN ("NEW", "PRICE_OFFERED", "ACCEPTED", "IN_PROGRESS")')
    active_orders = cursor.fetchone()[0]
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤
    cursor.execute('SELECT COUNT(*) FROM users')
    total_clients = cursor.fetchone()[0]
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π
    cursor.execute('SELECT COUNT(*) FROM drivers WHERE is_approved = 1')
    total_drivers = cursor.fetchone()[0]
    
    conn.close()
    
    stats_text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
    stats_text += f"<b>–ó–∞–∫–∞–∑—ã:</b>\n"
    stats_text += f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
    stats_text += f"–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {completed_orders}\n" 
    stats_text += f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_orders}\n\n"
    stats_text += f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
    stats_text += f"–ö–ª–∏–µ–Ω—Ç–æ–≤: {total_clients}\n"
    stats_text += f"–í–æ–¥–∏—Ç–µ–ª–µ–π: {total_drivers}\n"
    
    bot.send_message(
        message.chat.id,
        stats_text,
        parse_mode="HTML",
        reply_markup=get_admin_keyboard()
    )

@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" and is_admin(message.from_user.id))
def add_admin_start(message):
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:")
    bot.register_next_step_handler(message, add_admin_process)

def add_admin_process(message):
    try:
        new_admin_id = int(message.text.strip())
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        bot.register_next_step_handler(message, add_admin_process)
        return
    
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('INSERT OR IGNORE INTO admins (user_id, first_name) VALUES (?, ?)', (new_admin_id, None))
    conn.commit()
    conn.close()
    
    bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.", reply_markup=get_admin_keyboard())
    
    # –£–≤–µ–¥–æ–º–∏–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç
    try:
        bot.send_message(new_admin_id, "üëë –í–∞–º –≤—ã–¥–∞–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞.")
    except Exception:
        pass

@bot.message_handler(func=lambda message: message.text == "üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤" and is_admin(message.from_user.id))
def order_history(message):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT o.*, u.first_name, u.last_name
        FROM orders o
        JOIN users u ON o.client_id = u.id
        WHERE o.status IN ('COMPLETED', 'CANCELLED')
        ORDER BY o.created_at DESC
        LIMIT 10
    ''')
    
    orders = cursor.fetchall()
    conn.close()
    
    if not orders:
        bot.send_message(
            message.chat.id,
            "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç–∞.",
            reply_markup=get_admin_keyboard()
        )
        return
    
    for order in orders:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM orders WHERE client_id = ? AND id <= ?', (order['client_id'], order['id']))
        client_order_number = cursor.fetchone()[0]
        conn.close()
        
        order_text = f"üìã <b>–ó–∞–∫–∞–∑ #{client_order_number}</b> (ID: {order['id']})\n\n"
        order_text += f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order['first_name']} {order['last_name'] or ''}\n"
        order_text += f"üìç <b>–û—Ç–∫—É–¥–∞:</b> {order['from_address']}\n"
        order_text += f"üèÅ <b>–ö—É–¥–∞:</b> {order['to_address']}\n"
        
        if order['price']:
            order_text += f"üí∞ <b>–¶–µ–Ω–∞:</b> {order['price']} —Ä—É–±.\n"
        
        status_map = {
            "COMPLETED": "–ó–∞–≤–µ—Ä—à–µ–Ω",
            "CANCELLED": "–û—Ç–º–µ–Ω–µ–Ω"
        }
        order_text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_map.get(order['status'], order['status'])}\n"
        
        bot.send_message(
            message.chat.id,
            order_text,
            parse_mode="HTML"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith("set_price:") and is_admin(call.from_user.id))
def set_price_callback(call):
    parts = call.data.split(":")
    if len(parts) != 2:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    order_id = int(parts[1])
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    bot.edit_message_reply_markup(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=None
    )
    
    bot.send_message(
        call.message.chat.id,
        f"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –∑–∞–∫–∞–∑–∞ ID {order_id} (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –≤ —Ä—É–±–ª—è—Ö):"
    )
    
    bot.register_next_step_handler(call.message, lambda m: process_price_input(m, order_id))

def process_price_input(message, order_id):
    try:
        price = float(message.text)
        
        if price <= 0:
            bot.send_message(
                message.chat.id,
                "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
        conn = get_db_connection()
        cursor = conn.cursor()
        
        cursor.execute('UPDATE orders SET price = ?, status = ? WHERE id = ?', (price, 'PRICE_OFFERED', order_id))
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞
        cursor.execute('''
            SELECT o.*, u.user_id, u.first_name
            FROM orders o
            JOIN users u ON o.client_id = u.id
            WHERE o.id = ?
        ''', (order_id,))
        
        order = cursor.fetchone()
        conn.commit()
        conn.close()
        
        if not order:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM orders WHERE client_id = ? AND id <= ?', (order['client_id'], order_id))
        client_order_number = cursor.fetchone()[0]
        conn.close()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        bot.send_message(
            message.chat.id,
            f"‚úÖ –¶–µ–Ω–∞ {price} —Ä—É–±. —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{client_order_number} (ID: {order_id}).",
            reply_markup=get_admin_keyboard()
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        client_text = f"üí∞ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ —Ü–µ–Ω–∞ –∑–∞ –ø–æ–µ–∑–¥–∫—É</b>\n\n"
        client_text += f"–ó–∞–∫–∞–∑ #{client_order_number}\n"
        client_text += f"–¶–µ–Ω–∞: {price} —Ä—É–±.\n\n"
        client_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(
            telebot.types.InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data=f"accept_price:{order_id}"),
            telebot.types.InlineKeyboardButton("‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data=f"decline_price:{order_id}")
        )
        markup.add(telebot.types.InlineKeyboardButton("üí∞ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—é —Ü–µ–Ω—É", callback_data=f"counter_offer:{order_id}"))
        
        bot.send_message(
            order['user_id'],
            client_text,
            parse_mode="HTML",
            reply_markup=markup
        )
        
    except ValueError:
        bot.send_message(
            message.chat.id,
            "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ."
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —Ü–µ–Ω—É
@bot.callback_query_handler(func=lambda call: call.data.startswith("accept_price:"))
def accept_price_callback(call):
    parts = call.data.split(":")
    if len(parts) != 2:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    order_id = int(parts[1])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute('SELECT price, scheduled_at FROM orders WHERE id = ?', (order_id,))
    order = cursor.fetchone()
    
    if not order:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        conn.close()
        return
    
    cursor.execute('UPDATE orders SET status = ? WHERE id = ?', ('ACCEPTED', order_id))
    conn.commit()
    conn.close()
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        SELECT o.client_id
        FROM orders o
        WHERE o.id = ?
    ''', (order_id,))
    result = cursor.fetchone()
    
    cursor.execute('SELECT COUNT(*) FROM orders WHERE client_id = ? AND id <= ?', (result['client_id'], order_id))
    client_order_number = cursor.fetchone()[0]
    conn.close()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    scheduled_text = ""
    if order['scheduled_at']:
        try:
            scheduled_time = datetime.datetime.fromisoformat(order['scheduled_at']).strftime('%d.%m %H:%M')
            scheduled_text = f"\nüïê –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {scheduled_time}"
        except:
            pass
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ —Ü–µ–Ω—É {order['price']} —Ä—É–±. –∑–∞ –ø–æ–µ–∑–¥–∫—É #{client_order_number}.{scheduled_text}\n\n"
             f"–û–∂–∏–¥–∞–π—Ç–µ, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –≤–∞–º –±—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω –≤–æ–¥–∏—Ç–µ–ª—å.",
        reply_markup=None
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    bot.send_message(
        call.message.chat.id,
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.",
        reply_markup=get_main_keyboard()
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    send_to_admins(
        f"‚úÖ –ö–ª–∏–µ–Ω—Ç –ø—Ä–∏–Ω—è–ª —Ü–µ–Ω—É {order['price']} —Ä—É–±. –∑–∞ –∑–∞–∫–∞–∑ #{client_order_number} (ID: {order_id}).\n"
        f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è."
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("decline_price:"))
def decline_price_callback(call):
    parts = call.data.split(":")
    if len(parts) != 2:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    order_id = int(parts[1])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute('SELECT price, client_id FROM orders WHERE id = ?', (order_id,))
    order = cursor.fetchone()
    
    if not order:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        conn.close()
        return
    
    cursor.execute('UPDATE orders SET status = ? WHERE id = ?', ('DECLINED', order_id))
    conn.commit()
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    cursor.execute('SELECT COUNT(*) FROM orders WHERE client_id = ? AND id <= ?', (order['client_id'], order_id))
    client_order_number = cursor.fetchone()[0]
    
    conn.close()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ —Ü–µ–Ω—É {order['price']} —Ä—É–±. –∑–∞ –ø–æ–µ–∑–¥–∫—É #{client_order_number}.\n\n"
             f"–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.",
        reply_markup=None
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    bot.send_message(
        call.message.chat.id,
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.",
        reply_markup=get_main_keyboard()
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    send_to_admins(
        f"‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–∏–ª —Ü–µ–Ω—É {order['price']} —Ä—É–±. –∑–∞ –∑–∞–∫–∞–∑ #{client_order_number} (ID: {order_id})."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è
@bot.callback_query_handler(func=lambda call: call.data.startswith("assign_driver:") and is_admin(call.from_user.id))
def assign_driver_callback(call):
    parts = call.data.split(":")
    if len(parts) != 2:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    order_id = int(parts[1])
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π (–∏—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫—Ç–æ –¥–æ–º–∞ –∏–ª–∏ –Ω–∞ –º–µ—Å—Ç–µ)
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM drivers WHERE is_approved = 1 AND status IN ("ON_DUTY", "ON_ORDER")')
    drivers = cursor.fetchall()
    
    if not drivers:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π")
        bot.send_message(
            call.message.chat.id,
            "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –Ω–∞ –ª–∏–Ω–∏–∏."
        )
        conn.close()
        return
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    bot.edit_message_reply_markup(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=None
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–¥–∏—Ç–µ–ª—è–º–∏
    markup = telebot.types.InlineKeyboardMarkup()
    for driver in drivers:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –≤–æ–¥–∏—Ç–µ–ª—è
        cursor.execute('SELECT COUNT(*) FROM orders WHERE driver_id = ? AND status IN ("IN_PROGRESS", "ACCEPTED")', (driver['id'],))
        active_orders_count = cursor.fetchone()[0]
        
        if active_orders_count > 0:
            button_text = f"{driver['first_name']} - {driver['car_number']} ({active_orders_count} –∑–∞–∫–∞–∑{'–∞' if active_orders_count > 1 else ''})"
        else:
            button_text = f"{driver['first_name']} - {driver['car_number']}"
        markup.add(telebot.types.InlineKeyboardButton(button_text, callback_data=f"select_driver:{order_id}:{driver['id']}"))
    
    bot.send_message(
        call.message.chat.id,
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –∑–∞–∫–∞–∑–∞ ID {order_id}:",
        reply_markup=markup
    )
    
    conn.close()

# –ö–Ω–æ–ø–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—è: –ù–∞ –º–µ—Å—Ç–µ
@bot.message_handler(func=lambda message: message.text == "üìç –ù–∞ –º–µ—Å—Ç–µ" and get_driver_by_id(message.from_user.id))
def driver_arrived(message):
    """–í–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–±—ã–ª –Ω–∞ —Ç–æ—á–∫—É –ê"""
    user_id = message.from_user.id
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT id FROM drivers WHERE user_id = ?', (user_id,))
    driver = cursor.fetchone()
    if not driver:
        conn.close()
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å.")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –≤–æ–¥–∏—Ç–µ–ª—è
    cursor.execute('SELECT id, client_id FROM orders WHERE driver_id = ? AND status = ?', (driver['id'], 'IN_PROGRESS'))
    order = cursor.fetchone()
    if not order:
        conn.close()
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–¥–∏—Ç–µ–ª—è
    cursor.execute('UPDATE drivers SET status = ? WHERE id = ?', ('ARRIVED', driver['id']))
    conn.commit()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    cursor.execute('SELECT user_id FROM users WHERE id = ?', (order['client_id'],))
    client = cursor.fetchone()
    conn.close()
    if client:
        try:
            bot.send_message(client['user_id'], "üöó –í–∞—à –≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–±—ã–ª –Ω–∞ –º–µ—Å—Ç–æ (—Ç–æ—á–∫–∞ –ê). –ü–æ–¥—Ö–æ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –æ –ø—Ä–∏–±—ã—Ç–∏–∏: {e}")
    
    bot.send_message(message.chat.id, "–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: –ù–∞ –º–µ—Å—Ç–µ.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("select_driver:") and is_admin(call.from_user.id))
def select_driver_callback(call):
    parts = call.data.split(":")
    if len(parts) != 3:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    order_id = int(parts[1])
    driver_id = int(parts[2])
    
    # –ù–∞–∑–Ω–∞—á–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –Ω–∞ –∑–∞–∫–∞–∑
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM orders WHERE id = ?', (order_id,))
    order = cursor.fetchone()
    cursor.execute('SELECT * FROM drivers WHERE id = ?', (driver_id,))
    driver = cursor.fetchone()
    
    if not order or not driver:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –∏–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        conn.close()
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
    cursor.execute('UPDATE orders SET driver_id = ?, status = ? WHERE id = ?', (driver_id, 'IN_PROGRESS', order_id))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–¥–∏—Ç–µ–ª—è –Ω–∞ "–ù–∞ –∑–∞–∫–∞–∑–µ" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –±—ã–ª "–ù–∞ –ª–∏–Ω–∏–∏"
    if driver['status'] == 'ON_DUTY':
        cursor.execute('UPDATE drivers SET status = ? WHERE id = ?', ('ON_ORDER', driver_id))
    
    conn.commit()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    cursor.execute('SELECT user_id FROM users WHERE id = ?', (order['client_id'],))
    client = cursor.fetchone()
    client_user_id = client['user_id'] if client else None
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    cursor.execute('SELECT COUNT(*) FROM orders WHERE client_id = ? AND id <= ?', (order['client_id'], order_id))
    client_order_number = cursor.fetchone()[0]
    
    conn.close()
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    bot.edit_message_reply_markup(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=None
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    bot.send_message(
        call.message.chat.id,
        f"‚úÖ –í–æ–¥–∏—Ç–µ–ª—å {driver['first_name']} ({driver['car_number']}) –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –∑–∞–∫–∞–∑ #{client_order_number} (ID: {order_id}).",
        reply_markup=get_admin_keyboard()
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    if client_user_id:
        client_text = f"üöï <b>–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω –≤–æ–¥–∏—Ç–µ–ª—å</b>\n\n"
        client_text += f"–ó–∞–∫–∞–∑ #{client_order_number}\n"
        client_text += f"–í–æ–¥–∏—Ç–µ–ª—å: {driver['first_name']}\n"
        client_text += f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å: {driver['car_number']}\n\n"
        client_text += "–í–æ–¥–∏—Ç–µ–ª—å —Å–∫–æ—Ä–æ –ø—Ä–∏–±—É–¥–µ—Ç –Ω–∞ –º–µ—Å—Ç–æ –ø–æ—Å–∞–¥–∫–∏."
        
        bot.send_message(
            client_user_id,
            client_text,
            parse_mode="HTML"
        )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è
    driver_text = f"üÜï <b>–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n\n"
    driver_text += f"–ó–∞–∫–∞–∑ #{client_order_number} (ID: {order_id})\n"
    driver_text += f"–û—Ç: {order['from_address']}\n"
    driver_text += f"–î–æ: {order['to_address']}\n"
    driver_text += f"–¶–µ–Ω–∞: {order['price']} —Ä—É–±.\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞
    if order.get('scheduled_at'):
        try:
            scheduled_time = datetime.datetime.fromisoformat(order['scheduled_at']).strftime('%d.%m %H:%M')
            driver_text += f"üïê –í—Ä–µ–º—è –ø–æ–¥–∞—á–∏: {scheduled_time}\n"
        except:
            pass
    
    if order['comment']:
        driver_text += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order['comment']}\n"
    
    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ —Ç–æ—á–∫—É –ê (–ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞—á–Ω–µ—Ç—Å—è –ø–æ–µ–∑–¥–∫–∞)
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("üöó –í–æ–¥–∏—Ç–µ–ª—å –ø–æ–¥—ä–µ—Ö–∞–ª –≤ —Ç–æ—á–∫—É –ê", callback_data=f"driver_arrived:{order_id}"))
    
    bot.send_message(
        driver['user_id'],
        driver_text,
        parse_mode="HTML",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("counter_offer:"))
def counter_offer_callback(call):
    parts = call.data.split(":")
    if len(parts) != 2:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    order_id = int(parts[1])
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    bot.edit_message_reply_markup(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=None
    )
    
    bot.send_message(
        call.message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ü–µ–Ω—É –∑–∞ –ø–æ–µ–∑–¥–∫—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –≤ —Ä—É–±–ª—è—Ö):"
    )
    
    bot.register_next_step_handler(call.message, lambda m: process_counter_offer(m, order_id))

def process_counter_offer(message, order_id):
    try:
        price = float(message.text)
        
        if price <= 0:
            bot.send_message(
                message.chat.id,
                "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            bot.register_next_step_handler(message, lambda m: process_counter_offer(m, order_id))
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
        conn = get_db_connection()
        cursor = conn.cursor()
        
        cursor.execute('SELECT price, client_id FROM orders WHERE id = ?', (order_id,))
        order = cursor.fetchone()
        
        if not order:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            conn.close()
            return
        
        cursor.execute('UPDATE orders SET counter_offer = ? WHERE id = ?', (price, order_id))
        conn.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        cursor.execute('SELECT COUNT(*) FROM orders WHERE client_id = ? AND id <= ?', (order['client_id'], order_id))
        client_order_number = cursor.fetchone()[0]
        
        conn.close()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        bot.send_message(
            message.chat.id,
            f"‚úÖ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã {price} —Ä—É–±. –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É.\n"
            f"–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.",
            reply_markup=get_main_keyboard()
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(
            telebot.types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å —Ü–µ–Ω—É", callback_data=f"accept_counter_offer:{order_id}"),
            telebot.types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_counter_offer:{order_id}")
        )
        markup.add(telebot.types.InlineKeyboardButton("üí∞ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥—Ä—É–≥—É—é —Ü–µ–Ω—É", callback_data=f"admin_counter_offer:{order_id}"))
        
        send_to_admins(
            f"üí∞ <b>–í—Å—Ç—Ä–µ—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞</b>\n\n"
            f"–ó–∞–∫–∞–∑ #{client_order_number} (ID: {order_id})\n"
            f"–í–∞—à–∞ —Ü–µ–Ω–∞: {order['price']} —Ä—É–±.\n"
            f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞: {price} —Ä—É–±.\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="HTML",
            reply_markup=markup
        )
        
    except ValueError:
        bot.send_message(
            message.chat.id,
            "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        bot.register_next_step_handler(message, lambda m: process_counter_offer(m, order_id))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data.startswith("accept_counter_offer:") and is_admin(call.from_user.id))
def accept_counter_offer_callback(call):
    """–ê–¥–º–∏–Ω –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Å—Ç—Ä–µ—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
    parts = call.data.split(":")
    if len(parts) != 2:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    order_id = int(parts[1])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—É –∫–ª–∏–µ–Ω—Ç–∞ –∫–∞–∫ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—É—é
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT counter_offer, client_id FROM orders WHERE id = ?', (order_id,))
    order = cursor.fetchone()
    
    if not order or not order['counter_offer']:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        conn.close()
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—É –∫–ª–∏–µ–Ω—Ç–∞ –∫–∞–∫ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—É—é –∏ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –ø—Ä–∏–Ω—è—Ç—ã–π
    cursor.execute('UPDATE orders SET price = ?, status = ? WHERE id = ?', (order['counter_offer'], 'ACCEPTED', order_id))
    conn.commit()
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    cursor.execute('SELECT COUNT(*) FROM orders WHERE client_id = ? AND id <= ?', (order['client_id'], order_id))
    client_order_number = cursor.fetchone()[0]
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    cursor.execute('SELECT user_id FROM users WHERE id = ?', (order['client_id'],))
    client = cursor.fetchone()
    client_user_id = client['user_id'] if client else None
    
    conn.close()
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    bot.edit_message_reply_markup(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=None
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    bot.send_message(
        call.message.chat.id,
        f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ {order['counter_offer']} —Ä—É–±. –∑–∞ –∑–∞–∫–∞–∑ #{client_order_number} (ID: {order_id}).\n"
        f"–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è.",
        reply_markup=get_admin_keyboard()
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    if client_user_id:
        bot.send_message(
            client_user_id,
            f"üéâ <b>–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏!</b>\n\n"
            f"–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã {order['counter_offer']} —Ä—É–±. –∑–∞ –∑–∞–∫–∞–∑ #{client_order_number} –ø—Ä–∏–Ω—è—Ç–æ!\n\n"
            f"–û–∂–∏–¥–∞–π—Ç–µ, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –≤–∞–º –±—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω –≤–æ–¥–∏—Ç–µ–ª—å.",
            parse_mode="HTML",
            reply_markup=get_main_keyboard()
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith("decline_counter_offer:") and is_admin(call.from_user.id))
def decline_counter_offer_callback(call):
    """–ê–¥–º–∏–Ω –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –≤—Å—Ç—Ä–µ—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
    parts = call.data.split(":")
    if len(parts) != 2:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    order_id = int(parts[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT counter_offer, price, client_id FROM orders WHERE id = ?', (order_id,))
    order = cursor.fetchone()
    
    if not order:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        conn.close()
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–π
    cursor.execute('UPDATE orders SET status = ? WHERE id = ?', ('DECLINED', order_id))
    conn.commit()
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    cursor.execute('SELECT COUNT(*) FROM orders WHERE client_id = ? AND id <= ?', (order['client_id'], order_id))
    client_order_number = cursor.fetchone()[0]
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    cursor.execute('SELECT user_id FROM users WHERE id = ?', (order['client_id'],))
    client = cursor.fetchone()
    client_user_id = client['user_id'] if client else None
    
    conn.close()
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    bot.edit_message_reply_markup(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=None
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    bot.send_message(
        call.message.chat.id,
        f"‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ {order['counter_offer']} —Ä—É–±. –∑–∞ –∑–∞–∫–∞–∑ #{client_order_number} (ID: {order_id}).\n"
        f"–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.",
        reply_markup=get_admin_keyboard()
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    if client_user_id:
        bot.send_message(
            client_user_id,
            f"üòî <b>–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ</b>\n\n"
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã {order['counter_offer']} —Ä—É–±. –∑–∞ –∑–∞–∫–∞–∑ #{client_order_number} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.\n\n"
            f"–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.",
            parse_mode="HTML",
            reply_markup=get_main_keyboard()
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith("admin_counter_offer:") and is_admin(call.from_user.id))
def admin_counter_offer_callback(call):
    """–ê–¥–º–∏–Ω –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–≤–æ—é –≤—Å—Ç—Ä–µ—á–Ω—É—é —Ü–µ–Ω—É"""
    parts = call.data.split(":")
    if len(parts) != 2:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    order_id = int(parts[1])
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    bot.edit_message_reply_markup(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=None
    )
    
    bot.send_message(
        call.message.chat.id,
        f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –≤—Å—Ç—Ä–µ—á–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –∑–∞–∫–∞–∑–∞ ID {order_id} (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –≤ —Ä—É–±–ª—è—Ö):"
    )
    
    bot.register_next_step_handler(call.message, lambda m: process_admin_counter_offer(m, order_id))

def process_admin_counter_offer(message, order_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å—Ç—Ä–µ—á–Ω–æ–π —Ü–µ–Ω—ã –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        price = float(message.text)
        
        if price <= 0:
            bot.send_message(
                message.chat.id,
                "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            bot.register_next_step_handler(message, lambda m: process_admin_counter_offer(m, order_id))
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
        conn = get_db_connection()
        cursor = conn.cursor()
        
        cursor.execute('SELECT counter_offer, client_id FROM orders WHERE id = ?', (order_id,))
        order = cursor.fetchone()
        
        if not order:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            conn.close()
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫ "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ —Ü–µ–Ω–∞"
        cursor.execute('UPDATE orders SET price = ?, status = ? WHERE id = ?', (price, 'PRICE_OFFERED', order_id))
        conn.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        cursor.execute('SELECT COUNT(*) FROM orders WHERE client_id = ? AND id <= ?', (order['client_id'], order_id))
        client_order_number = cursor.fetchone()[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        cursor.execute('SELECT user_id FROM users WHERE id = ?', (order['client_id'],))
        client = cursor.fetchone()
        client_user_id = client['user_id'] if client else None
        
        conn.close()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        bot.send_message(
            message.chat.id,
            f"‚úÖ –í–∞—à–∞ –≤—Å—Ç—Ä–µ—á–Ω–∞—è —Ü–µ–Ω–∞ {price} —Ä—É–±. –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç—É –∑–∞ –∑–∞–∫–∞–∑ #{client_order_number} (ID: {order_id}).\n"
            f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –±—ã–ª–æ: {order['counter_offer']} —Ä—É–±.",
            reply_markup=get_admin_keyboard()
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å –Ω–æ–≤—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º
        if client_user_id:
            
            client_text = f"üí∞ <b>–í—Å—Ç—Ä–µ—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞</b>\n\n"
            client_text += f"–ó–∞–∫–∞–∑ #{client_order_number}\n"
            client_text += f"–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {order['counter_offer']} —Ä—É–±.\n"
            client_text += f"–ù–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞: {price} —Ä—É–±.\n\n"
            client_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            
            markup = telebot.types.InlineKeyboardMarkup()
            markup.add(
                telebot.types.InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data=f"accept_price:{order_id}"),
                telebot.types.InlineKeyboardButton("‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω", callback_data=f"decline_price:{order_id}")
            )
            markup.add(telebot.types.InlineKeyboardButton("üí∞ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—é —Ü–µ–Ω—É", callback_data=f"counter_offer:{order_id}"))
            
            bot.send_message(
                client_user_id,
                client_text,
                parse_mode="HTML",
                reply_markup=markup
            )
        
    except ValueError:
        bot.send_message(
            message.chat.id,
            "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        bot.register_next_step_handler(message, lambda m: process_admin_counter_offer(m, order_id))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—á–∏—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑—ã" (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
@bot.message_handler(func=lambda message: message.text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑—ã" and is_admin(message.from_user.id))
def clear_orders(message):
    """–ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –æ—á–∏—Å—Ç–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã"""
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM orders WHERE status NOT IN (?, ?)', ('COMPLETED', 'CANCELLED'))
    active_count = cursor.fetchone()[0]
    
    if active_count == 0:
        bot.send_message(
            message.chat.id,
            "‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.",
            reply_markup=get_admin_keyboard()
        )
        conn.close()
        return
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="confirm_clear_orders"),
        telebot.types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_clear_orders")
    )
    
    bot.send_message(
        message.chat.id,
        f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏</b>\n\n"
        f"–ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: <b>{active_count}</b>\n\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        f"‚Ä¢ –û—Ç–º–µ–Ω–∏—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã\n"
        f"‚Ä¢ –û—Å–≤–æ–±–æ–¥–∏—Ç –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π\n"
        f"‚Ä¢ –£–≤–µ–¥–æ–º–∏—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–± –æ—Ç–º–µ–Ω–µ\n\n"
        f"<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.\n\n"
        f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        parse_mode="HTML",
        reply_markup=markup
    )
    
    conn.close()

@bot.callback_query_handler(func=lambda call: call.data == "confirm_clear_orders" and is_admin(call.from_user.id))
def confirm_clear_orders_callback(call):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤"""
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö –∏ –≤–æ–¥–∏—Ç–µ–ª—è—Ö
    cursor.execute('''
        SELECT o.id, o.client_id, o.driver_id, u.user_id as client_user_id, d.user_id as driver_user_id
        FROM orders o
        LEFT JOIN users u ON o.client_id = u.id
        LEFT JOIN drivers d ON o.driver_id = d.id
        WHERE o.status NOT IN (?, ?)
    ''', ('COMPLETED', 'CANCELLED'))
    
    active_orders = cursor.fetchall()
    cleared_count = len(active_orders)
    
    if cleared_count == 0:
        bot.edit_message_text(
            "‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id
        )
        return
    
    # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    cursor.execute('UPDATE orders SET status = ? WHERE status NOT IN (?, ?)', ('CANCELLED', 'COMPLETED', 'CANCELLED'))
    
    # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π (—Å—Ç–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å "–ù–∞ –ª–∏–Ω–∏–∏")
    cursor.execute('UPDATE drivers SET status = ? WHERE status = ?', ('ON_DUTY', 'ON_ORDER'))
    
    conn.commit()
    conn.close()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–æ–≤
    notified_clients = 0
    for order in active_orders:
        if order['client_user_id']:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
                conn = get_db_connection()
                cursor = conn.cursor()
                cursor.execute('SELECT COUNT(*) FROM orders WHERE client_id = ? AND id <= ?', (order['client_id'], order['id']))
                client_order_number = cursor.fetchone()[0]
                conn.close()
                
                bot.send_message(
                    order['client_user_id'],
                    f"‚ùå <b>–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n"
                    f"–í–∞—à –∑–∞–∫–∞–∑ #{client_order_number} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º.\n\n"
                    f"–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.",
                    parse_mode="HTML",
                    reply_markup=get_main_keyboard()
                )
                notified_clients += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ {order['client_user_id']}: {e}")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª–µ–π –æ–± –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏
    notified_drivers = 0
    for order in active_orders:
        if order['driver_user_id'] and order['driver_id']:
            try:
                bot.send_message(
                    order['driver_user_id'],
                    f"‚ÑπÔ∏è <b>–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n"
                    f"–í–∞—à —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º.\n"
                    f"–í–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <b>üü¢ –ù–∞ –ª–∏–Ω–∏–∏</b>\n\n"
                    f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã.",
                    parse_mode="HTML",
                    reply_markup=get_driver_keyboard()
                )
                notified_drivers += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è {order['driver_user_id']}: {e}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    bot.edit_message_text(
        f"‚úÖ <b>–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
        f"–û—Ç–º–µ–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: <b>{cleared_count}</b>\n"
        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: <b>{notified_clients}</b>\n"
        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π: <b>{notified_drivers}</b>\n\n"
        f"–í—Å–µ –≤–æ–¥–∏—Ç–µ–ª–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ —Å—Ç–∞—Ç—É—Å \"–ù–∞ –ª–∏–Ω–∏–∏\".",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        parse_mode="HTML"
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–¥–º–∏–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    bot.send_message(
        call.message.chat.id,
        "–ì–æ—Ç–æ–≤–æ! –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É.",
        reply_markup=get_admin_keyboard()
    )

@bot.callback_query_handler(func=lambda call: call.data == "cancel_clear_orders" and is_admin(call.from_user.id))
def cancel_clear_orders_callback(call):
    """–û—Ç–º–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤"""
    bot.edit_message_text(
        "‚ùå –û—á–∏—Å—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id
    )
    
    bot.send_message(
        call.message.chat.id,
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.",
        reply_markup=get_admin_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –∑–∞–∫–∞–∑—ã"
@bot.message_handler(func=lambda message: message.text == "üìù –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
def my_orders(message):
    user_id = message.from_user.id
    user = get_user_by_id(user_id)
    
    if not user:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM orders WHERE client_id = ? ORDER BY created_at DESC LIMIT 5', (user['id'],))
    orders = cursor.fetchall()
    
    if not orders:
        bot.send_message(
            message.chat.id, 
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.",
            reply_markup=get_main_keyboard()
        )
        conn.close()
        return
    
    for order in orders:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        cursor.execute('SELECT COUNT(*) FROM orders WHERE client_id = ? AND id <= ?', (user['id'], order['id']))
        client_order_number = cursor.fetchone()[0]
        
        order_text = f"üöï <b>–ó–∞–∫–∞–∑ #{client_order_number}</b>\n\n"
        order_text += f"üìç <b>–û—Ç–∫—É–¥–∞:</b> {order['from_address']}\n"
        order_text += f"üèÅ <b>–ö—É–¥–∞:</b> {order['to_address']}\n"
        
        if order['comment']:
            order_text += f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {order['comment']}\n"
        
        if order['price']:
            order_text += f"üí∞ <b>–¶–µ–Ω–∞:</b> {order['price']} —Ä—É–±.\n"
        
        if order['counter_offer']:
            order_text += f"üí∏ <b>–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</b> {order['counter_offer']} —Ä—É–±.\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        if order.get('scheduled_at'):
            try:
                scheduled_time = datetime.datetime.fromisoformat(order['scheduled_at']).strftime('%d.%m %H:%M')
                order_text += f"üïê <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è:</b> {scheduled_time}\n"
            except:
                pass
        
        status_map = {
            "NEW": "–ù–æ–≤—ã–π",
            "PRICE_OFFERED": "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ —Ü–µ–Ω–∞",
            "ACCEPTED": "–ü—Ä–∏–Ω—è—Ç",
            "DECLINED": "–û—Ç–∫–ª–æ–Ω–µ–Ω",
            "IN_PROGRESS": "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è",
            "COMPLETED": "–ó–∞–≤–µ—Ä—à–µ–Ω",
            "CANCELLED": "–û—Ç–º–µ–Ω–µ–Ω"
        }
        order_text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_map.get(order['status'], order['status'])}\n"
        order_text += f"üïí <b>–°–æ–∑–¥–∞–Ω:</b> {order['created_at']}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏, –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∏ –µ—â–µ –Ω–µ –æ—Ü–µ–Ω–µ–Ω
        markup = None
        if order['status'] == "COMPLETED":
            cursor.execute('SELECT * FROM reviews WHERE order_id = ?', (order['id'],))
            review = cursor.fetchone()
            if not review:
                markup = telebot.types.InlineKeyboardMarkup()
                for i in range(1, 6):
                    markup.add(telebot.types.InlineKeyboardButton(f"‚≠ê {i}", callback_data=f"rate:{order['id']}:{i}"))
        
        bot.send_message(
            message.chat.id,
            order_text,
            parse_mode="HTML",
            reply_markup=markup
        )
    
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ü–µ–Ω–∫–∏ –ø–æ–µ–∑–¥–∫–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("rate:"))
def process_rating(call):
    parts = call.data.split(":")
    if len(parts) != 3:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ü–µ–Ω–∫–∏")
        return
    
    order_id = int(parts[1])
    rating = int(parts[2])
    user_id = call.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = get_user_by_id(user_id)
    if not user:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM orders WHERE id = ? AND client_id = ?', (order_id, user['id']))
    order = cursor.fetchone()
    
    if not order:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        conn.close()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç–∑—ã–≤
    cursor.execute('SELECT * FROM reviews WHERE order_id = ?', (order_id,))
    existing_review = cursor.fetchone()
    if existing_review:
        bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ –Ω–∞ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑")
        conn.close()
        return
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–∑—ã–≤
    cursor.execute(
        'INSERT INTO reviews (order_id, client_id, driver_id, rating) VALUES (?, ?, ?, ?)',
        (order_id, user['id'], order['driver_id'], rating)
    )
    conn.commit()
    conn.close()
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏
    bot.edit_message_reply_markup(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=None
    )
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç–∑—ã–≤—É
    bot.send_message(
        call.message.chat.id,
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É {rating}/5! –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç–∑—ã–≤—É?\n"
        "–ï—Å–ª–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-':"
    )
    bot.register_next_step_handler(call.message, lambda m: process_review_comment(m, order_id))

def process_review_comment(message, order_id):
    comment = message.text
    
    if comment and comment != '-':
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('UPDATE reviews SET comment = ? WHERE order_id = ?', (comment, order_id))
        conn.commit()
        conn.close()
        
        bot.send_message(
            message.chat.id,
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ.",
            reply_markup=get_main_keyboard()
        )
    else:
        bot.send_message(
            message.chat.id,
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!",
            reply_markup=get_main_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç—å –Ω–∞—à–∏–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º"
@bot.message_handler(func=lambda message: message.text == "ü§ù –°—Ç–∞—Ç—å –Ω–∞—à–∏–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º")
def become_partner(message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å
    driver = get_driver_by_id(user_id)
    
    if driver:
        if driver['is_approved']:
            bot.send_message(
                message.chat.id,
                f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å!\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /driver –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω—é –≤–æ–¥–∏—Ç–µ–ª—è.",
                reply_markup=get_main_keyboard()
            )
        else:
            bot.send_message(
                message.chat.id,
                "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–¥–∏—Ç–µ–ª—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                reply_markup=get_main_keyboard()
            )
        return
    
    # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è
    bot.send_message(
        message.chat.id,
        "üöó <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è-–ø–∞—Ä—Ç–Ω–µ—Ä–∞</b>\n\n"
        "–î–ª—è —Ä–∞–±–æ—Ç—ã –≤ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
        "–í–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
        "‚Ä¢ –ü–æ–ª–Ω–æ–µ –∏–º—è\n"
        "‚Ä¢ –ù–æ–º–µ—Ä –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è\n"
        "‚Ä¢ –î–∞–Ω–Ω—ã–µ –ü–¢–° –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n"
        "‚Ä¢ –ì–æ—Å–Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n"
        "‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å 4-—Ö —Å—Ç–æ—Ä–æ–Ω\n\n"
        "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?",
        parse_mode="HTML"
    )
    
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("‚úÖ –î–∞, –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="start_driver_reg"))
    markup.add(telebot.types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_driver_reg"))
    
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è
@bot.callback_query_handler(func=lambda call: call.data == "start_driver_reg")
def start_driver_registration(call):
    user_id = call.from_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    driver_registration_data[user_id] = {}
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤–æ–¥–∏—Ç–µ–ª—è.\n\n"
             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:",
        reply_markup=None
    )
    
    bot.register_next_step_handler(call.message, process_driver_name)

@bot.callback_query_handler(func=lambda call: call.data == "cancel_driver_reg")
def cancel_driver_registration(call):
    user_id = call.from_user.id
    
    # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if user_id in driver_registration_data:
        del driver_registration_data[user_id]
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=None
    )
    
    bot.send_message(
        call.message.chat.id,
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_main_keyboard()
    )

def process_driver_name(message):
    user_id = message.from_user.id
    name = message.text.strip()
    
    if not name or len(name) < 2:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞).")
        bot.register_next_step_handler(message, process_driver_name)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
    driver_registration_data[user_id]['first_name'] = name
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è:"
    )
    bot.register_next_step_handler(message, process_driver_license)

def process_driver_license(message):
    user_id = message.from_user.id
    license_number = message.text.strip()
    
    if not license_number or len(license_number) < 5:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è.")
        bot.register_next_step_handler(message, process_driver_license)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è
    driver_registration_data[user_id]['license_number'] = license_number
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ü–¢–°
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ü–¢–° –∞–≤—Ç–æ–º–æ–±–∏–ª—è (—Å–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä):"
    )
    bot.register_next_step_handler(message, process_car_registration)

def process_car_registration(message):
    user_id = message.from_user.id
    car_registration = message.text.strip()
    
    if not car_registration or len(car_registration) < 5:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ü–¢–°.")
        bot.register_next_step_handler(message, process_car_registration)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ü–¢–°
    driver_registration_data[user_id]['car_registration'] = car_registration
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–æ—Å–Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Å–Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ê123–ë–í78):"
    )
    bot.register_next_step_handler(message, process_car_number)

def process_car_number(message):
    user_id = message.from_user.id
    car_number = message.text.strip().upper()
    
    if not car_number or len(car_number) < 6:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ—Å–Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è.")
        bot.register_next_step_handler(message, process_car_number)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Å–Ω–æ–º–µ—Ä
    driver_registration_data[user_id]['car_number'] = car_number
    driver_registration_data[user_id]['car_photos'] = []
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å–ø–µ—Ä–µ–¥–∏
    bot.send_message(
        message.chat.id,
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.\n\n"
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è <b>–°–ü–ï–†–ï–î–ò</b>:",
        parse_mode="HTML"
    )
    bot.register_next_step_handler(message, process_front_photo)

def process_front_photo(message):
    user_id = message.from_user.id
    
    if not message.photo:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å–ø–µ—Ä–µ–¥–∏.")
        bot.register_next_step_handler(message, process_front_photo)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ —Å–ø–µ—Ä–µ–¥–∏
    photo = message.photo[-1]
    driver_registration_data[user_id]['car_photos'].append({
        'position': 'front',
        'file_id': photo.file_id
    })
    
    bot.send_message(
        message.chat.id,
        "‚úÖ –§–æ—Ç–æ —Å–ø–µ—Ä–µ–¥–∏ –ø–æ–ª—É—á–µ–Ω–æ!\n\n"
        "üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è <b>–°–ó–ê–î–ò</b>:",
        parse_mode="HTML"
    )
    bot.register_next_step_handler(message, process_back_photo)

def process_back_photo(message):
    user_id = message.from_user.id
    
    if not message.photo:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å–∑–∞–¥–∏.")
        bot.register_next_step_handler(message, process_back_photo)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ —Å–∑–∞–¥–∏
    photo = message.photo[-1]
    driver_registration_data[user_id]['car_photos'].append({
        'position': 'back',
        'file_id': photo.file_id
    })
    
    bot.send_message(
        message.chat.id,
        "‚úÖ –§–æ—Ç–æ —Å–∑–∞–¥–∏ –ø–æ–ª—É—á–µ–Ω–æ!\n\n"
        "üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è <b>–°–õ–ï–í–ê</b>:",
        parse_mode="HTML"
    )
    bot.register_next_step_handler(message, process_left_photo)

def process_left_photo(message):
    user_id = message.from_user.id
    
    if not message.photo:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å–ª–µ–≤–∞.")
        bot.register_next_step_handler(message, process_left_photo)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ —Å–ª–µ–≤–∞
    photo = message.photo[-1]
    driver_registration_data[user_id]['car_photos'].append({
        'position': 'left',
        'file_id': photo.file_id
    })
    
    bot.send_message(
        message.chat.id,
        "‚úÖ –§–æ—Ç–æ —Å–ª–µ–≤–∞ –ø–æ–ª—É—á–µ–Ω–æ!\n\n"
        "üì∏ –ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è <b>–°–ü–†–ê–í–ê</b>:",
        parse_mode="HTML"
    )
    bot.register_next_step_handler(message, process_right_photo)

def process_right_photo(message):
    user_id = message.from_user.id
    
    if not message.photo:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å–ø—Ä–∞–≤–∞.")
        bot.register_next_step_handler(message, process_right_photo)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ —Å–ø—Ä–∞–≤–∞
    photo = message.photo[-1]
    driver_registration_data[user_id]['car_photos'].append({
        'position': 'right',
        'file_id': photo.file_id
    })
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    complete_driver_registration(message)

def complete_driver_registration(message):
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    reg_data = driver_registration_data.get(user_id, {})
    
    if not reg_data:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤–æ–¥–∏—Ç–µ–ª–µ –≤ –ë–î
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—Å–∏–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ JSON —Å—Ç—Ä–æ–∫—É
    car_photos_json = json.dumps(reg_data.get('car_photos', []))
    
    cursor.execute('''
        INSERT INTO drivers (user_id, first_name, license_number, car_registration, car_number, car_photos, status, is_approved)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    ''', (
        user_id,
        reg_data.get('first_name', ''),
        reg_data.get('license_number', ''),
        reg_data.get('car_registration', ''),
        reg_data.get('car_number', ''),
        car_photos_json,
        'OFF_DUTY',
        0  # –ù–µ –æ–¥–æ–±—Ä–µ–Ω
    ))
    
    conn.commit()
    conn.close()
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if user_id in driver_registration_data:
        del driver_registration_data[user_id]
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.send_message(
        message.chat.id,
        "‚úÖ <b>–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n\n"
        "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–¥–∏—Ç–µ–ª—è-–ø–∞—Ä—Ç–Ω–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
        "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞.\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É —Å –Ω–∞–º–∏! üöó",
        parse_mode="HTML",
        reply_markup=get_main_keyboard()
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
    admin_text = f"üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤–æ–¥–∏—Ç–µ–ª—è</b>\n\n"
    admin_text += f"üë§ <b>–ò–º—è:</b> {reg_data.get('first_name', '')}\n"
    admin_text += f"üöó <b>–ì–æ—Å–Ω–æ–º–µ—Ä:</b> {reg_data.get('car_number', '')}\n"
    admin_text += f"üìÑ <b>–í–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ:</b> {reg_data.get('license_number', '')}\n"
    admin_text += f"üìù <b>–ü–¢–°:</b> {reg_data.get('car_registration', '')}\n"
    admin_text += f"üë§ <b>Telegram:</b> @{message.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
    
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(
        telebot.types.InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_driver_new:{user_id}"),
        telebot.types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_driver_new:{user_id}")
    )
    
    send_to_admins(
        admin_text,
        parse_mode="HTML",
        reply_markup=markup
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∞–¥–º–∏–Ω—É
    for photo in reg_data.get('car_photos', []):
        caption = f"–§–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è {reg_data.get('car_number', '')}: {photo.get('position', '')}"
        send_photo_to_admins(photo.get('file_id', ''), caption=caption)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª–µ–π
@bot.callback_query_handler(func=lambda call: call.data.startswith("approve_driver_new:") and is_admin(call.from_user.id))
def approve_driver_new_callback(call):
    parts = call.data.split(":")
    if len(parts) != 2:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    driver_user_id = int(parts[1])
    
    # –û–¥–æ–±—Ä—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('UPDATE drivers SET is_approved = 1 WHERE user_id = ?', (driver_user_id,))
    cursor.execute('SELECT first_name, car_number FROM drivers WHERE user_id = ?', (driver_user_id,))
    driver = cursor.fetchone()
    conn.commit()
    conn.close()
    
    if not driver:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    bot.edit_message_reply_markup(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=None
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    bot.send_message(
        call.message.chat.id,
        f"‚úÖ –í–æ–¥–∏—Ç–µ–ª—å {driver['first_name']} ({driver['car_number']}) –æ–¥–æ–±—Ä–µ–Ω.",
        reply_markup=get_admin_keyboard()
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è
    bot.send_message(
        driver_user_id,
        "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
        "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–¥–∏—Ç–µ–ª—è –æ–¥–æ–±—Ä–µ–Ω–∞.\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /driver –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω—é –≤–æ–¥–∏—Ç–µ–ª—è.",
        parse_mode="HTML"
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("reject_driver_new:") and is_admin(call.from_user.id))
def reject_driver_new_callback(call):
    parts = call.data.split(":")
    if len(parts) != 2:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    driver_user_id = int(parts[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–æ–¥–∏—Ç–µ–ª–µ
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT first_name FROM drivers WHERE user_id = ?', (driver_user_id,))
    driver = cursor.fetchone()
    
    if driver:
        driver_name = driver['first_name']
        # –£–¥–∞–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –∏–∑ –ë–î
        cursor.execute('DELETE FROM drivers WHERE user_id = ?', (driver_user_id,))
        conn.commit()
    else:
        driver_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    
    conn.close()
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    bot.edit_message_reply_markup(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=None
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    bot.send_message(
        call.message.chat.id,
        f"‚ùå –ó–∞—è–≤–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—è {driver_name} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.",
        reply_markup=get_admin_keyboard()
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è
    bot.send_message(
        driver_user_id,
        "‚ùå <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n"
        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–¥–∏—Ç–µ–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.",
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏"
@bot.message_handler(func=lambda message: message.text == "üë®‚Äç‚úàÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏" and is_admin(message.from_user.id))
def manage_drivers(message):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤–æ–¥–∏—Ç–µ–ª–µ–π
    cursor.execute('SELECT * FROM drivers WHERE is_approved = 0')
    pending_drivers = cursor.fetchall()
    
    if pending_drivers:
        bot.send_message(
            message.chat.id,
            f"üìù <b>–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤–æ–¥–∏—Ç–µ–ª–µ–π ({len(pending_drivers)}):</b>",
            parse_mode="HTML"
        )
        
        for driver in pending_drivers:
            driver_text = f"üë§ <b>–ò–º—è:</b> {driver['first_name']}\n"
            driver_text += f"üöó <b>–ì–æ—Å–Ω–æ–º–µ—Ä:</b> {driver['car_number']}\n"
            driver_text += f"üìÑ <b>–í–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ:</b> {driver['license_number']}\n"
            driver_text += f"üìù <b>–ü–¢–°:</b> {driver['car_registration']}\n"
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            markup = telebot.types.InlineKeyboardMarkup()
            markup.add(
                telebot.types.InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_driver_new:{driver['user_id']}"),
                telebot.types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_driver_new:{driver['user_id']}")
            )
            
            bot.send_message(
                message.chat.id,
                driver_text,
                parse_mode="HTML",
                reply_markup=markup
            )
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
    cursor.execute('SELECT * FROM drivers WHERE is_approved = 1')
    active_drivers = cursor.fetchall()
    
    if active_drivers:
        bot.send_message(
            message.chat.id,
            f"üöï <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–∏ ({len(active_drivers)}):</b>",
            parse_mode="HTML"
        )
        
        for driver in active_drivers:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –≤–æ–¥–∏—Ç–µ–ª—è
            cursor.execute('SELECT AVG(rating) FROM reviews WHERE driver_id = ?', (driver['id'],))
            avg_rating = cursor.fetchone()[0] or 0
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –≤–æ–¥–∏—Ç–µ–ª—è
            cursor.execute('SELECT SUM(amount) FROM earnings WHERE driver_id = ?', (driver['id'],))
            total_earnings = cursor.fetchone()[0] or 0
            
            status_map = {
                "ON_DUTY": "–ù–∞ –ª–∏–Ω–∏–∏",
                "ON_ORDER": "–ù–∞ –∑–∞–∫–∞–∑–µ",
                "OFF_DUTY": "–î–æ–º–∞",
                "ARRIVED": "–ù–∞ –º–µ—Å—Ç–µ"
            }
            
            driver_text = f"üë®‚Äç‚úàÔ∏è <b>{driver['first_name']}</b>\n"
            driver_text += f"üöó <b>–ù–æ–º–µ—Ä –∞–≤—Ç–æ:</b> {driver['car_number']}\n"
            driver_text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_map.get(driver['status'], driver['status'])}\n"
            driver_text += f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {avg_rating:.1f}/5.0\n"
            driver_text += f"üí∞ <b>–û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫:</b> {total_earnings} —Ä—É–±.\n"
            
            bot.send_message(
                message.chat.id,
                driver_text,
                parse_mode="HTML"
            )
    
    if not pending_drivers and not active_drivers:
        bot.send_message(
            message.chat.id,
            "–ù–µ—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
            reply_markup=get_admin_keyboard()
        )
    
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile
@bot.message_handler(commands=['profile'])
def profile_command(message):
    user_id = message.from_user.id
    user = get_user_by_id(user_id)
    
    if not user:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM orders WHERE client_id = ?', (user['id'],))
    orders_count = cursor.fetchone()[0]
    conn.close()
    
    profile_text = f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
    profile_text += f"–ò–º—è: {user['first_name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} {user['last_name'] or ''}\n"
    profile_text += f"Username: @{user['username'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
    profile_text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {user['phone_number'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
    profile_text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {orders_count}\n"
    profile_text += f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user['registration_date']}\n"
    
    bot.send_message(message.chat.id, profile_text, parse_mode="HTML")
    
    # –ï—Å–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ–≥–æ —É–∫–∞–∑–∞—Ç—å
    if not user['phone_number']:
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        button = telebot.types.KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
        markup.add(button)
        markup.add(telebot.types.KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        
        bot.send_message(
            message.chat.id,
            "–î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–∞ —Ç–∞–∫—Å–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
            reply_markup=markup
        )

@bot.message_handler(content_types=['contact'])
def contact_handler(message):
    if message.contact is not None:
        user_id = message.from_user.id
        phone = message.contact.phone_number
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –ë–î
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('UPDATE users SET phone_number = ? WHERE user_id = ?', (phone, user_id))
        conn.commit()
        conn.close()
        
        bot.send_message(
            message.chat.id,
            "–°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.",
            reply_markup=get_main_keyboard()
        )

# –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞: –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ–ª–µ–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /driver
@bot.message_handler(commands=['driver'])
def driver_command(message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å
    driver = get_driver_by_id(user_id)
    
    if not driver:
        bot.send_message(
            message.chat.id,
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å.\n"
            "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'ü§ù –°—Ç–∞—Ç—å –Ω–∞—à–∏–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
            reply_markup=get_main_keyboard()
        )
        return
    
    if not driver['is_approved']:
        bot.send_message(
            message.chat.id,
            "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–¥–∏—Ç–µ–ª—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤–æ–¥–∏—Ç–µ–ª—è
    bot.send_message(
        message.chat.id,
        f"üöó <b>–ú–µ–Ω—é –≤–æ–¥–∏—Ç–µ–ª—è</b>\n\n"
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {driver['first_name']}!\n"
        f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å: {driver['car_number']}",
        parse_mode="HTML",
        reply_markup=get_driver_keyboard()
    )

def get_driver_keyboard():
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(telebot.types.KeyboardButton("üöó –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å"))
    markup.add(telebot.types.KeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã"), telebot.types.KeyboardButton("üí∞ –ú–æ–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫"))
    markup.add(telebot.types.KeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤–æ–¥–∏—Ç–µ–ª—è
@bot.message_handler(func=lambda message: message.text == "üöó –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
def change_driver_status(message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å
    driver = get_driver_by_id(user_id)
    
    if not driver or not driver['is_approved']:
        bot.send_message(
            message.chat.id,
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–∑–º–µ–Ω–∏—Ç—å
    status_map = {
        "ON_DUTY": "–ù–∞ –ª–∏–Ω–∏–∏",
        "ON_ORDER": "–ù–∞ –∑–∞–∫–∞–∑–µ", 
        "OFF_DUTY": "–î–æ–º–∞"
    }
    current_status = status_map.get(driver['status'], driver['status'])
    
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("üü¢ –ù–∞ –ª–∏–Ω–∏–∏", callback_data="status:ON_DUTY"))
    markup.add(telebot.types.InlineKeyboardButton("üî¥ –î–æ–º–∞", callback_data="status:OFF_DUTY"))
    
    bot.send_message(
        message.chat.id,
        f"–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: <b>{current_status}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:",
        parse_mode="HTML",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("status:"))
def process_status_change(call):
    parts = call.data.split(":")
    if len(parts) != 2:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—É—Å–∞")
        return
    
    status = parts[1]
    user_id = call.from_user.id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–¥–∏—Ç–µ–ª—è –≤ –ë–î
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM drivers WHERE user_id = ?', (user_id,))
    driver = cursor.fetchone()
    
    if not driver:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        conn.close()
        return
    
    old_status = driver['status']
    cursor.execute('UPDATE drivers SET status = ? WHERE user_id = ?', (status, user_id))
    conn.commit()
    conn.close()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è
    status_map = {
        "ON_DUTY": "–ù–∞ –ª–∏–Ω–∏–∏",
        "ON_ORDER": "–ù–∞ –∑–∞–∫–∞–∑–µ",
        "OFF_DUTY": "–î–æ–º–∞"
    }
    new_status_text = status_map.get(status, status)
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"‚úÖ –í–∞—à —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <b>{new_status_text}</b>",
        parse_mode="HTML",
        reply_markup=None
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    old_status_text = status_map.get(old_status, old_status)
    admin_text = f"üîÑ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–æ–¥–∏—Ç–µ–ª—è</b>\n\n"
    admin_text += f"üë§ <b>–í–æ–¥–∏—Ç–µ–ª—å:</b> {driver['first_name']}\n"
    admin_text += f"üöó <b>–ì–æ—Å–Ω–æ–º–µ—Ä:</b> {driver['car_number']}\n"
    admin_text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {old_status_text} ‚û°Ô∏è {new_status_text}"
    
    send_to_admins(
        admin_text,
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ú–æ–∏ –∑–∞–∫–∞–∑—ã" –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π
@bot.message_handler(func=lambda message: message.text == "üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã" and get_driver_by_id(message.from_user.id))
def driver_orders(message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å
    driver = get_driver_by_id(user_id)
    
    if not driver or not driver['is_approved']:
        bot.send_message(
            message.chat.id,
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –≤–æ–¥–∏—Ç–µ–ª—è (—Å–Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ, –ø–æ—Ç–æ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        SELECT * FROM orders WHERE driver_id = ? 
        ORDER BY 
            CASE 
                WHEN status IN ('IN_PROGRESS', 'ACCEPTED', 'ARRIVED') THEN 0 
                ELSE 1 
            END,
            created_at DESC 
        LIMIT 10
    ''', (driver['id'],))
    orders = cursor.fetchall()
    
    if not orders:
        bot.send_message(
            message.chat.id,
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.",
            reply_markup=get_driver_keyboard()
        )
        conn.close()
        return
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    active_orders = [order for order in orders if order['status'] in ('IN_PROGRESS', 'ACCEPTED', 'ARRIVED')]
    completed_orders = [order for order in orders if order['status'] not in ('IN_PROGRESS', 'ACCEPTED', 'ARRIVED')]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    if active_orders:
        header_text = f"üöï <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã</b>\n\nüìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {len(active_orders)}\n{'='*30}"
        bot.send_message(message.chat.id, header_text, parse_mode="HTML")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –∑–∞–∫–∞–∑–µ
    for order in orders:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        cursor.execute('SELECT COUNT(*) FROM orders WHERE client_id = ? AND id <= ?', (order['client_id'], order['id']))
        client_order_number = cursor.fetchone()[0]
        
        order_text = f"üöï <b>–ó–∞–∫–∞–∑ #{client_order_number}</b> (ID: {order['id']})\n\n"
        order_text += f"üìç <b>–û—Ç–∫—É–¥–∞:</b> {order['from_address']}\n"
        order_text += f"üèÅ <b>–ö—É–¥–∞:</b> {order['to_address']}\n"
        
        if order['comment']:
            order_text += f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {order['comment']}\n"
        
        if order['price']:
            order_text += f"üí∞ <b>–¶–µ–Ω–∞:</b> {order['price']} —Ä—É–±.\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è
        if order.get('scheduled_at'):
            try:
                scheduled_time = datetime.datetime.fromisoformat(order['scheduled_at']).strftime('%d.%m %H:%M')
                order_text += f"üïê <b>–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏:</b> {scheduled_time}\n"
            except:
                pass
        
        status_map = {
            "NEW": "–ù–æ–≤—ã–π",
            "PRICE_OFFERED": "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ —Ü–µ–Ω–∞",
            "ACCEPTED": "–ü—Ä–∏–Ω—è—Ç",
            "DECLINED": "–û—Ç–∫–ª–æ–Ω–µ–Ω",
            "IN_PROGRESS": "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è",
            "COMPLETED": "–ó–∞–≤–µ—Ä—à–µ–Ω",
            "CANCELLED": "–û—Ç–º–µ–Ω–µ–Ω"
        }
        order_text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_map.get(order['status'], order['status'])}\n"
        order_text += f"üïí <b>–°–æ–∑–¥–∞–Ω:</b> {order['created_at']}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –µ—Å–ª–∏ –æ–Ω –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
        markup = None
        if order['status'] == 'IN_PROGRESS':
            markup = telebot.types.InlineKeyboardMarkup()
            markup.add(telebot.types.InlineKeyboardButton("‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω", callback_data=f"complete_order:{order['id']}"))
        
        bot.send_message(
            message.chat.id,
            order_text,
            parse_mode="HTML",
            reply_markup=markup
        )
    
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–º
@bot.callback_query_handler(func=lambda call: call.data.startswith("complete_order:"))
def complete_order_callback(call):
    parts = call.data.split(":")
    if len(parts) != 2:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    order_id = int(parts[1])
    user_id = call.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM orders WHERE id = ?', (order_id,))
    order = cursor.fetchone()
    
    if not order:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        conn.close()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ —ç—Ç–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
    driver = get_driver_by_id(user_id)
    
    if not driver or driver['id'] != order['driver_id']:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –≤–∞—Å")
        conn.close()
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    cursor.execute('UPDATE orders SET status = ?, completed_at = ? WHERE id = ?', ('COMPLETED', datetime.datetime.now(datetime.timezone.utc).isoformat(), order_id))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –≤–æ–¥–∏—Ç–µ–ª—è –¥—Ä—É–≥–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    cursor.execute('SELECT COUNT(*) FROM orders WHERE driver_id = ? AND status IN ("IN_PROGRESS", "ACCEPTED", "ARRIVED") AND id != ?', (driver['id'], order_id))
    other_active_orders = cursor.fetchone()[0]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–¥–∏—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    if other_active_orders == 0:
        cursor.execute('UPDATE drivers SET status = ? WHERE id = ?', ('ON_DUTY', driver['id']))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞—Ä–∞–±–æ—Ç–∫–µ
    cursor.execute('INSERT INTO earnings (driver_id, order_id, amount) VALUES (?, ?, ?)', (driver['id'], order_id, order['price']))
    
    conn.commit()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    cursor.execute('SELECT user_id FROM users WHERE id = ?', (order['client_id'],))
    client = cursor.fetchone()
    client_user_id = client['user_id'] if client else None
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
    cursor.execute('SELECT COUNT(*) FROM orders WHERE client_id = ? AND id <= ?', (order['client_id'], order_id))
    client_order_number = cursor.fetchone()[0]
    
    conn.close()
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    bot.edit_message_reply_markup(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=None
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è
    completion_message = f"‚úÖ –ó–∞–∫–∞–∑ #{client_order_number} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.\n" \
                        f"–°—É–º–º–∞ {order['price']} —Ä—É–±. –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –≤–∞—à–µ–º—É –∑–∞—Ä–∞–±–æ—Ç–∫—É."
    
    if other_active_orders > 0:
        completion_message += f"\n\nüìã –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {other_active_orders}"
    else:
        completion_message += f"\n\nüè† –í—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ —Å—Ç–∞—Ç—É—Å '–ù–∞ –ª–∏–Ω–∏–∏'"
    
    bot.send_message(
        call.message.chat.id,
        completion_message,
        reply_markup=get_driver_keyboard()
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ü–µ–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É
    if client_user_id:
        client_text = f"‚úÖ <b>–ü–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
        client_text += f"–ó–∞–∫–∞–∑ #{client_order_number} –≤—ã–ø–æ–ª–Ω–µ–Ω.\n"
        client_text += f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!\n\n"
        client_text += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –ø–æ–µ–∑–¥–∫—É:"
        
        markup = telebot.types.InlineKeyboardMarkup()
        for i in range(1, 6):
            markup.add(telebot.types.InlineKeyboardButton(f"‚≠ê {i}", callback_data=f"rate:{order_id}:{i}"))
        
        bot.send_message(
            client_user_id,
            client_text,
            parse_mode="HTML",
            reply_markup=markup
        )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    send_to_admins(
        f"‚úÖ –ó–∞–∫–∞–∑ #{client_order_number} (ID: {order_id}) –∑–∞–≤–µ—Ä—à–µ–Ω –≤–æ–¥–∏—Ç–µ–ª–µ–º {driver['first_name']} ({driver['car_number']}).\n"
        f"–°—É–º–º–∞: {order['price']} —Ä—É–±."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ú–æ–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫" –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π
@bot.message_handler(func=lambda message: message.text == "üí∞ –ú–æ–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫")
def driver_earnings(message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å
    driver = get_driver_by_id(user_id)
    
    if not driver or not driver['is_approved']:
        bot.send_message(
            message.chat.id,
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –≤–æ–¥–∏—Ç–µ–ª—è
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫
    cursor.execute('SELECT SUM(amount) FROM earnings WHERE driver_id = ?', (driver['id'],))
    total_earnings = cursor.fetchone()[0] or 0
    
    # –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    now = datetime.datetime.now(datetime.timezone.utc)
    start_of_month = datetime.datetime(now.year, now.month, 1, tzinfo=datetime.timezone.utc).isoformat()
    cursor.execute('SELECT SUM(amount) FROM earnings WHERE driver_id = ? AND date >= ?', (driver['id'], start_of_month))
    monthly_earnings = cursor.fetchone()[0] or 0
    
    # –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    start_of_day = datetime.datetime.combine(now.date(), datetime.time.min, tzinfo=datetime.timezone.utc).isoformat()
    cursor.execute('SELECT SUM(amount) FROM earnings WHERE driver_id = ? AND date >= ?', (driver['id'], start_of_day))
    daily_earnings = cursor.fetchone()[0] or 0
    
    conn.close()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    earnings_text = f"üí∞ <b>–í–∞—à –∑–∞—Ä–∞–±–æ—Ç–æ–∫</b>\n\n"
    earnings_text += f"–°–µ–≥–æ–¥–Ω—è: {daily_earnings} —Ä—É–±.\n"
    earnings_text += f"–ó–∞ –º–µ—Å—è—Ü: {monthly_earnings} —Ä—É–±.\n"
    earnings_text += f"–í—Å–µ–≥–æ: {total_earnings} —Ä—É–±."
    
    bot.send_message(
        message.chat.id,
        earnings_text,
        parse_mode="HTML",
        reply_markup=get_driver_keyboard()
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¢–∞–∫—Å–∏ –°–≤–µ—Ç–ª–æ–≥–æ—Ä—Å–∫39")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    bot.set_my_commands([
        telebot.types.BotCommand("/start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        telebot.types.BotCommand("/help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
        telebot.types.BotCommand("/order", "–ó–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏"),
        telebot.types.BotCommand("/profile", "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å"),
        telebot.types.BotCommand("/driver", "–ú–µ–Ω—é –≤–æ–¥–∏—Ç–µ–ª—è"),
        telebot.types.BotCommand("/admin", "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)")
    ])
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
    bot_info = bot.get_me()
    logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{bot_info.username} ({bot_info.first_name})")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        logger.info("–ë–æ—Ç –Ω–∞—á–∞–ª –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        while True:
            try:
                bot.polling(none_stop=True, interval=1, timeout=30)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ polling: {e}")
                logger.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ polling —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                import time
                time.sleep(5)
                continue
                
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
    finally:
        logger.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
