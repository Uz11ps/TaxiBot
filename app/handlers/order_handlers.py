from telebot import TeleBot
from telebot.types import Message, CallbackQuery
from app.keyboards import (
    get_main_keyboard,
    get_popular_destinations_keyboard,
    get_order_confirmation_keyboard,
    get_price_response_keyboard,
    get_rating_keyboard
)
from app.utils import save_user_data, get_user_by_id, is_within_city_radius, format_order_info
from app.database import Session, User, Order, Driver, Review
from config import ADMIN_ID, POPULAR_DESTINATIONS
import datetime

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
user_order_data = {}

def register_order_handlers(bot: TeleBot):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤"""
    
    @bot.message_handler(commands=['order'])
    @bot.message_handler(func=lambda message: message.text == "üöï –ó–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏")
    def order_taxi(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∑–∞–∫–∞–∑–∞ —Ç–∞–∫—Å–∏"""
        user_id = message.from_user.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
        save_user_data(
            user_id,
            message.from_user.username,
            message.from_user.first_name,
            message.from_user.last_name
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        user_order_data[user_id] = {}
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Ç–æ—á–∫–∞ –ê).\n\n"
            "‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –∑–∞–∫–∞–∑—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑ –≥. –°–≤–µ—Ç–ª–æ–≥–æ—Ä—Å–∫ –∏ –≤ —Ä–∞–¥–∏—É—Å–µ 10 –∫–º.",
            reply_markup=None
        )
        bot.register_next_step_handler(message, process_from_address)
    
    def process_from_address(message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        user_id = message.from_user.id
        from_address = message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥—Ä–µ—Å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≥–æ—Ä–æ–¥–∞
        if not is_within_city_radius(from_address):
            bot.send_message(
                message.chat.id,
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –∑–æ–Ω—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.\n"
                "–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –≥. –°–≤–µ—Ç–ª–æ–≥–æ—Ä—Å–∫ –∏ –≤ —Ä–∞–¥–∏—É—Å–µ 10 –∫–º.",
                reply_markup=get_main_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        user_order_data[user_id]['from_address'] = from_address
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        bot.send_message(
            message.chat.id,
            "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (—Ç–æ—á–∫–∞ –ë):",
            reply_markup=get_popular_destinations_keyboard()
        )
        bot.register_next_step_handler(message, process_to_address)
    
    def process_to_address(message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
        user_id = message.from_user.id
        to_address = message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–ù–∞–∑–∞–¥"
        if to_address == "üîô –ù–∞–∑–∞–¥":
            order_taxi(message)
            return
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å"
        if to_address == "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å":
            bot.send_message(
                message.chat.id,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:",
                reply_markup=None
            )
            bot.register_next_step_handler(message, process_custom_to_address)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        user_order_data[user_id]['to_address'] = to_address
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É
        bot.send_message(
            message.chat.id,
            "–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).\n"
            "–ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω—É–∂–µ–Ω, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-':",
            reply_markup=None
        )
        bot.register_next_step_handler(message, process_comment)
    
    def process_custom_to_address(message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
        user_id = message.from_user.id
        to_address = message.text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        user_order_data[user_id]['to_address'] = to_address
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É
        bot.send_message(
            message.chat.id,
            "–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).\n"
            "–ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω—É–∂–µ–Ω, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-':",
            reply_markup=None
        )
        bot.register_next_step_handler(message, process_comment)
    
    def process_comment(message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞–∫–∞–∑—É"""
        user_id = message.from_user.id
        comment = message.text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
        if comment and comment != '-':
            user_order_data[user_id]['comment'] = comment
        else:
            user_order_data[user_id]['comment'] = None
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        from_address = user_order_data[user_id]['from_address']
        to_address = user_order_data[user_id]['to_address']
        comment_text = user_order_data[user_id].get('comment', None)
        
        confirmation_text = f"üìã <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:</b>\n\n"
        confirmation_text += f"üìç <b>–û—Ç–∫—É–¥–∞:</b> {from_address}\n"
        confirmation_text += f"üèÅ <b>–ö—É–¥–∞:</b> {to_address}\n"
        
        if comment_text:
            confirmation_text += f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment_text}\n"
        
        confirmation_text += "\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:"
        
        bot.send_message(
            message.chat.id,
            confirmation_text,
            parse_mode="HTML",
            reply_markup=get_order_confirmation_keyboard()
        )
    
    @bot.callback_query_handler(func=lambda call: call.data == "confirm_order")
    def confirm_order_callback(call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
        user_id = call.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
        if user_id not in user_order_data:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        order_data = user_order_data[user_id]
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        user = get_user_by_id(user_id)
        if not user:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î
        session = Session()
        new_order = Order(
            client_id=user.id,
            from_address=order_data['from_address'],
            to_address=order_data['to_address'],
            comment=order_data.get('comment'),
            status="NEW"
        )
        session.add(new_order)
        session.commit()
        order_id = new_order.id
        session.close()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É.\n\n"
                 f"–û–∂–∏–¥–∞–π—Ç–µ, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ —Ü–µ–Ω–∞ –ø–æ–µ–∑–¥–∫–∏.",
            reply_markup=None
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        admin_text = f"üÜï <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}</b>\n\n"
        admin_text += f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {call.from_user.first_name} {call.from_user.last_name or ''}\n"
        admin_text += f"üìç <b>–û—Ç–∫—É–¥–∞:</b> {order_data['from_address']}\n"
        admin_text += f"üèÅ <b>–ö—É–¥–∞:</b> {order_data['to_address']}\n"
        
        if order_data.get('comment'):
            admin_text += f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {order_data['comment']}\n"
        
        bot.send_message(
            ADMIN_ID,
            admin_text,
            parse_mode="HTML"
        )
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if user_id in user_order_data:
            del user_order_data[user_id]
    
    @bot.callback_query_handler(func=lambda call: call.data == "cancel_order")
    def cancel_order_callback(call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞"""
        user_id = call.from_user.id
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if user_id in user_order_data:
            del user_order_data[user_id]
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=None
        )
        
        bot.send_message(
            call.message.chat.id,
            "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_main_keyboard()
        )
    
    @bot.message_handler(func=lambda message: message.text == "üìù –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
    def my_orders(message: Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = message.from_user.id
        user = get_user_by_id(user_id)
        
        if not user:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session = Session()
        orders = session.query(Order).filter(Order.client_id == user.id).order_by(Order.created_at.desc()).limit(5).all()
        
        if not orders:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
            return
        
        for order in orders:
            order_text = format_order_info(order)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏, –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∏ –µ—â–µ –Ω–µ –æ—Ü–µ–Ω–µ–Ω
            markup = None
            if order.status == "COMPLETED":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç–∑—ã–≤
                review = session.query(Review).filter(Review.order_id == order.id).first()
                if not review:
                    markup = get_rating_keyboard(order.id)
            
            bot.send_message(
                message.chat.id,
                order_text,
                parse_mode="HTML",
                reply_markup=markup
            )
        
        session.close()
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("rate:"))
    def process_rating(call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ –ø–æ–µ–∑–¥–∫–∏"""
        parts = call.data.split(":")
        if len(parts) != 3:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ü–µ–Ω–∫–∏")
            return
        
        order_id = int(parts[1])
        rating = int(parts[2])
        user_id = call.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = get_user_by_id(user_id)
        if not user:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∑—ã–≤
        session = Session()
        order = session.query(Order).filter(Order.id == order_id, Order.client_id == user.id).first()
        
        if not order:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            session.close()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ—Ç–∑—ã–≤
        existing_review = session.query(Review).filter(Review.order_id == order_id).first()
        if existing_review:
            bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ –Ω–∞ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑")
            session.close()
            return
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–∑—ã–≤
        review = Review(
            order_id=order_id,
            client_id=user.id,
            driver_id=order.driver_id,
            rating=rating
        )
        session.add(review)
        session.commit()
        session.close()
        
        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏
        bot.edit_message_reply_markup(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=None
        )
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç–∑—ã–≤—É
        bot.send_message(
            call.message.chat.id,
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É {rating}/5! –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç–∑—ã–≤—É?\n"
            "–ï—Å–ª–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-':"
        )
        bot.register_next_step_handler(call.message, lambda m: process_review_comment(m, order_id))
    
    def process_review_comment(message: Message, order_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –æ—Ç–∑—ã–≤—É"""
        comment = message.text
        
        if comment and comment != '-':
            session = Session()
            review = session.query(Review).filter(Review.order_id == order_id).first()
            
            if review:
                review.comment = comment
                session.commit()
            
            session.close()
            
            bot.send_message(
                message.chat.id,
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ.",
                reply_markup=get_main_keyboard()
            )
        else:
            bot.send_message(
                message.chat.id,
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!",
                reply_markup=get_main_keyboard()
            )
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("accept_price:"))
    def accept_price_callback(call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ü–µ–Ω—ã"""
        parts = call.data.split(":")
        if len(parts) != 2:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
        
        order_id = int(parts[1])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        session = Session()
        order = session.query(Order).filter(Order.id == order_id).first()
        
        if not order:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            session.close()
            return
        
        order.status = "ACCEPTED"
        session.commit()
        session.close()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ —Ü–µ–Ω—É {order.price} —Ä—É–±. –∑–∞ –ø–æ–µ–∑–¥–∫—É.\n\n"
                 f"–û–∂–∏–¥–∞–π—Ç–µ, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –≤–∞–º –±—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω –≤–æ–¥–∏—Ç–µ–ª—å.",
            reply_markup=None
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        bot.send_message(
            ADMIN_ID,
            f"‚úÖ –ö–ª–∏–µ–Ω—Ç –ø—Ä–∏–Ω—è–ª —Ü–µ–Ω—É {order.price} —Ä—É–±. –∑–∞ –∑–∞–∫–∞–∑ #{order_id}.\n"
            f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è."
        )
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("decline_price:"))
    def decline_price_callback(call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã"""
        parts = call.data.split(":")
        if len(parts) != 2:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
        
        order_id = int(parts[1])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        session = Session()
        order = session.query(Order).filter(Order.id == order_id).first()
        
        if not order:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            session.close()
            return
        
        order.status = "DECLINED"
        session.commit()
        session.close()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ —Ü–µ–Ω—É {order.price} —Ä—É–±. –∑–∞ –ø–æ–µ–∑–¥–∫—É.\n\n"
                 f"–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=None
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        bot.send_message(
            ADMIN_ID,
            f"‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–∏–ª —Ü–µ–Ω—É {order.price} —Ä—É–±. –∑–∞ –∑–∞–∫–∞–∑ #{order_id}."
        )
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("counter_offer:"))
    def counter_offer_callback(call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å—Ç—Ä–µ—á–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ü–µ–Ω—ã"""
        parts = call.data.split(":")
        if len(parts) != 2:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
        
        order_id = int(parts[1])
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ü–µ–Ω—É –∑–∞ –ø–æ–µ–∑–¥–∫—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –≤ —Ä—É–±–ª—è—Ö):",
            reply_markup=None
        )
        
        bot.register_next_step_handler(
            call.message,
            lambda m: process_counter_offer(m, order_id)
        )
    
    def process_counter_offer(message: Message, order_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –≤—Å—Ç—Ä–µ—á–Ω–æ–π —Ü–µ–Ω—ã"""
        try:
            price = float(message.text)
            
            if price <= 0:
                bot.send_message(
                    message.chat.id,
                    "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
            session = Session()
            order = session.query(Order).filter(Order.id == order_id).first()
            
            if not order:
                bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                session.close()
                return
            
            order.counter_offer = price
            session.commit()
            session.close()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.send_message(
                message.chat.id,
                f"‚úÖ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã {price} —Ä—É–±. –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É.\n"
                f"–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.",
                reply_markup=get_main_keyboard()
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
            bot.send_message(
                ADMIN_ID,
                f"üí∞ –ö–ª–∏–µ–Ω—Ç –ø—Ä–µ–¥–ª–æ–∂–∏–ª —Å–≤–æ—é —Ü–µ–Ω—É {price} —Ä—É–±. –∑–∞ –∑–∞–∫–∞–∑ #{order_id}.\n"
                f"–ò—Å—Ö–æ–¥–Ω–∞—è —Ü–µ–Ω–∞: {order.price} —Ä—É–±."
            )
            
        except ValueError:
            bot.send_message(
                message.chat.id,
                "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
