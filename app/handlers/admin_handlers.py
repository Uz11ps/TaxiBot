from telebot import TeleBot
from telebot.types import Message, CallbackQuery
from app.keyboards import get_admin_keyboard, get_main_keyboard, get_yes_no_keyboard
from app.utils import get_admin_order_view, format_driver_info
from app.database import Session, User, Driver, Order, Earning
from config import ADMIN_ID
from sqlalchemy import desc
import datetime

def register_admin_handlers(bot: TeleBot):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    
    @bot.message_handler(commands=['admin'])
    def admin_command(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if user_id != ADMIN_ID:
            bot.send_message(
                message.chat.id,
                "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏."
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        bot.send_message(
            message.chat.id,
            "üëë <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="HTML",
            reply_markup=get_admin_keyboard()
        )
    
    @bot.message_handler(func=lambda message: message.text == "üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã" and message.from_user.id == ADMIN_ID)
    def active_orders(message: Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã"""
        session = Session()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã (–Ω–æ–≤—ã–µ –∏ –ø—Ä–∏–Ω—è—Ç—ã–µ)
        orders = session.query(Order).filter(
            Order.status.in_(["NEW", "PRICE_OFFERED", "ACCEPTED", "IN_PROGRESS"])
        ).order_by(desc(Order.created_at)).all()
        
        if not orders:
            bot.send_message(
                message.chat.id,
                "–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.",
                reply_markup=get_admin_keyboard()
            )
            session.close()
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –∑–∞–∫–∞–∑–µ
        for order in orders:
            order_text = get_admin_order_view(order)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
            markup = None
            
            if order.status == "NEW":
                # –î–ª—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ - –∫–Ω–æ–ø–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω—ã
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"set_price:{order.id}"))
            
            elif order.status == "ACCEPTED":
                # –î–ª—è –ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞–∫–∞–∑–æ–≤ - –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üöï –ù–∞–∑–Ω–∞—á–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è", callback_data=f"assign_driver:{order.id}"))
            
            bot.send_message(
                message.chat.id,
                order_text,
                parse_mode="HTML",
                reply_markup=markup
            )
        
        session.close()
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("set_price:") and call.from_user.id == ADMIN_ID)
    def set_price_callback(call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–Ω—ã –∑–∞–∫–∞–∑–∞"""
        parts = call.data.split(":")
        if len(parts) != 2:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
        
        order_id = int(parts[1])
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—É
        bot.edit_message_reply_markup(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=None
        )
        
        bot.send_message(
            call.message.chat.id,
            f"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id} (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –≤ —Ä—É–±–ª—è—Ö):"
        )
        
        bot.register_next_step_handler(
            call.message,
            lambda m: process_price_input(m, order_id)
        )
    
    def process_price_input(message: Message, order_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Ü–µ–Ω—ã"""
        try:
            price = float(message.text)
            
            if price <= 0:
                bot.send_message(
                    message.chat.id,
                    "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
            session = Session()
            order = session.query(Order).filter(Order.id == order_id).first()
            
            if not order:
                bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                session.close()
                return
            
            order.price = price
            order.status = "PRICE_OFFERED"
            session.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            client = session.query(User).filter(User.id == order.client_id).first()
            client_id = client.user_id if client else None
            
            session.close()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            bot.send_message(
                message.chat.id,
                f"‚úÖ –¶–µ–Ω–∞ {price} —Ä—É–±. —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}.",
                reply_markup=get_admin_keyboard()
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            if client_id:
                from app.keyboards import get_price_response_keyboard
                
                client_text = f"üí∞ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ —Ü–µ–Ω–∞ –∑–∞ –ø–æ–µ–∑–¥–∫—É</b>\n\n"
                client_text += f"–ó–∞–∫–∞–∑ #{order_id}\n"
                client_text += f"–¶–µ–Ω–∞: {price} —Ä—É–±.\n\n"
                client_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                
                bot.send_message(
                    client_id,
                    client_text,
                    parse_mode="HTML",
                    reply_markup=get_price_response_keyboard(order_id)
                )
        
        except ValueError:
            bot.send_message(
                message.chat.id,
                "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("assign_driver:") and call.from_user.id == ADMIN_ID)
    def assign_driver_callback(call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è"""
        parts = call.data.split(":")
        if len(parts) != 2:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
        
        order_id = int(parts[1])
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
        session = Session()
        drivers = session.query(Driver).filter(
            Driver.is_approved == True,
            Driver.status == "ON_DUTY"
        ).all()
        
        if not drivers:
            bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π")
            bot.send_message(
                call.message.chat.id,
                "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –Ω–∞ –ª–∏–Ω–∏–∏."
            )
            session.close()
            return
        
        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        bot.edit_message_reply_markup(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=None
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–¥–∏—Ç–µ–ª—è–º–∏
        markup = types.InlineKeyboardMarkup()
        for driver in drivers:
            button_text = f"{driver.first_name} - {driver.car_number}"
            markup.add(types.InlineKeyboardButton(button_text, callback_data=f"select_driver:{order_id}:{driver.id}"))
        
        bot.send_message(
            call.message.chat.id,
            f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}:",
            reply_markup=markup
        )
        
        session.close()
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("select_driver:") and call.from_user.id == ADMIN_ID)
    def select_driver_callback(call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–æ–¥–∏—Ç–µ–ª—è"""
        parts = call.data.split(":")
        if len(parts) != 3:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
        
        order_id = int(parts[1])
        driver_id = int(parts[2])
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –Ω–∞ –∑–∞–∫–∞–∑
        session = Session()
        order = session.query(Order).filter(Order.id == order_id).first()
        driver = session.query(Driver).filter(Driver.id == driver_id).first()
        
        if not order or not driver:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –∏–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            session.close()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
        order.driver_id = driver_id
        order.status = "IN_PROGRESS"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–¥–∏—Ç–µ–ª—è
        driver.status = "ON_ORDER"
        
        session.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        client = session.query(User).filter(User.id == order.client_id).first()
        client_id = client.user_id if client else None
        
        # –ü–æ–ª—É—á–∞–µ–º ID –≤–æ–¥–∏—Ç–µ–ª—è –≤ Telegram
        driver_telegram_id = driver.user_id
        
        session.close()
        
        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        bot.edit_message_reply_markup(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=None
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        bot.send_message(
            call.message.chat.id,
            f"‚úÖ –í–æ–¥–∏—Ç–µ–ª—å {driver.first_name} ({driver.car_number}) –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –∑–∞–∫–∞–∑ #{order_id}.",
            reply_markup=get_admin_keyboard()
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        if client_id:
            client_text = f"üöï <b>–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω –≤–æ–¥–∏—Ç–µ–ª—å</b>\n\n"
            client_text += f"–ó–∞–∫–∞–∑ #{order_id}\n"
            client_text += f"–í–æ–¥–∏—Ç–µ–ª—å: {driver.first_name}\n"
            client_text += f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å: {driver.car_number}\n\n"
            client_text += "–í–æ–¥–∏—Ç–µ–ª—å —Å–∫–æ—Ä–æ –ø—Ä–∏–±—É–¥–µ—Ç –Ω–∞ –º–µ—Å—Ç–æ –ø–æ—Å–∞–¥–∫–∏."
            
            bot.send_message(
                client_id,
                client_text,
                parse_mode="HTML"
            )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è
        if driver_telegram_id:
            driver_text = f"üÜï <b>–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n\n"
            driver_text += f"–ó–∞–∫–∞–∑ #{order_id}\n"
            driver_text += f"–û—Ç: {order.from_address}\n"
            driver_text += f"–î–æ: {order.to_address}\n"
            driver_text += f"–¶–µ–Ω–∞: {order.price} —Ä—É–±.\n"
            
            if order.comment:
                driver_text += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order.comment}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω", callback_data=f"complete_order:{order_id}"))
            
            bot.send_message(
                driver_telegram_id,
                driver_text,
                parse_mode="HTML",
                reply_markup=markup
            )
    
    @bot.message_handler(func=lambda message: message.text == "üë®‚Äç‚úàÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏" and message.from_user.id == ADMIN_ID)
    def manage_drivers(message: Message):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏"""
        session = Session()
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤–æ–¥–∏—Ç–µ–ª–µ–π
        pending_drivers = session.query(Driver).filter(Driver.is_approved == False).all()
        
        if pending_drivers:
            bot.send_message(
                message.chat.id,
                f"üìù <b>–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤–æ–¥–∏—Ç–µ–ª–µ–π ({len(pending_drivers)}):</b>",
                parse_mode="HTML"
            )
            
            for driver in pending_drivers:
                driver_text = f"üë§ <b>–ò–º—è:</b> {driver.first_name}\n"
                driver_text += f"üöó <b>–ì–æ—Å–Ω–æ–º–µ—Ä:</b> {driver.car_number}\n"
                driver_text += f"üìÑ <b>–í–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ:</b> {driver.license_number}\n"
                driver_text += f"üìù <b>–ü–¢–°:</b> {driver.car_registration}\n"
                
                # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
                markup = types.InlineKeyboardMarkup()
                markup.add(
                    types.InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_driver:{driver.id}"),
                    types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_driver:{driver.id}")
                )
                
                bot.send_message(
                    message.chat.id,
                    driver_text,
                    parse_mode="HTML",
                    reply_markup=markup
                )
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
        active_drivers = session.query(Driver).filter(Driver.is_approved == True).all()
        
        if active_drivers:
            bot.send_message(
                message.chat.id,
                f"üöï <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–∏ ({len(active_drivers)}):</b>",
                parse_mode="HTML"
            )
            
            for driver in active_drivers:
                driver_info = format_driver_info(driver)
                bot.send_message(
                    message.chat.id,
                    driver_info,
                    parse_mode="HTML"
                )
        
        if not pending_drivers and not active_drivers:
            bot.send_message(
                message.chat.id,
                "–ù–µ—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
                reply_markup=get_admin_keyboard()
            )
        
        session.close()
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("approve_driver:") and call.from_user.id == ADMIN_ID)
    def approve_driver_callback(call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è"""
        parts = call.data.split(":")
        if len(parts) != 2:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
        
        driver_id = int(parts[1])
        
        # –û–¥–æ–±—Ä—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è
        session = Session()
        driver = session.query(Driver).filter(Driver.id == driver_id).first()
        
        if not driver:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            session.close()
            return
        
        driver.is_approved = True
        session.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º ID –≤–æ–¥–∏—Ç–µ–ª—è –≤ Telegram
        driver_telegram_id = driver.user_id
        
        session.close()
        
        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        bot.edit_message_reply_markup(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=None
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        bot.send_message(
            call.message.chat.id,
            f"‚úÖ –í–æ–¥–∏—Ç–µ–ª—å {driver.first_name} ({driver.car_number}) –æ–¥–æ–±—Ä–µ–Ω.",
            reply_markup=get_admin_keyboard()
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è
        if driver_telegram_id:
            bot.send_message(
                driver_telegram_id,
                "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–¥–∏—Ç–µ–ª—è –æ–¥–æ–±—Ä–µ–Ω–∞.\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /driver –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω—é –≤–æ–¥–∏—Ç–µ–ª—è.",
                parse_mode="HTML"
            )
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("reject_driver:") and call.from_user.id == ADMIN_ID)
    def reject_driver_callback(call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è"""
        parts = call.data.split(":")
        if len(parts) != 2:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
        
        driver_id = int(parts[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–æ–¥–∏—Ç–µ–ª–µ
        session = Session()
        driver = session.query(Driver).filter(Driver.id == driver_id).first()
        
        if not driver:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            session.close()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID –≤–æ–¥–∏—Ç–µ–ª—è –≤ Telegram
        driver_telegram_id = driver.user_id
        driver_name = driver.first_name
        
        # –£–¥–∞–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –∏–∑ –ë–î
        session.delete(driver)
        session.commit()
        session.close()
        
        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        bot.edit_message_reply_markup(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=None
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        bot.send_message(
            call.message.chat.id,
            f"‚ùå –ó–∞—è–≤–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—è {driver_name} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.",
            reply_markup=get_admin_keyboard()
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è
        if driver_telegram_id:
            bot.send_message(
                driver_telegram_id,
                "‚ùå <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–¥–∏—Ç–µ–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n"
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.",
                parse_mode="HTML"
            )
    
    @bot.message_handler(func=lambda message: message.text == "üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤" and message.from_user.id == ADMIN_ID)
    def order_history(message: Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤"""
        session = Session()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        orders = session.query(Order).filter(
            Order.status.in_(["COMPLETED", "CANCELLED"])
        ).order_by(desc(Order.created_at)).limit(10).all()
        
        if not orders:
            bot.send_message(
                message.chat.id,
                "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç–∞.",
                reply_markup=get_admin_keyboard()
            )
            session.close()
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –∑–∞–∫–∞–∑–µ
        for order in orders:
            order_text = get_admin_order_view(order)
            bot.send_message(
                message.chat.id,
                order_text,
                parse_mode="HTML"
            )
        
        session.close()
    
    @bot.message_handler(func=lambda message: message.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" and message.from_user.id == ADMIN_ID)
    def show_statistics(message: Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        session = Session()
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
        total_orders = session.query(Order).count()
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        completed_orders = session.query(Order).filter(Order.status == "COMPLETED").count()
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        cancelled_orders = session.query(Order).filter(Order.status == "CANCELLED").count()
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        active_orders = session.query(Order).filter(
            Order.status.in_(["NEW", "PRICE_OFFERED", "ACCEPTED", "IN_PROGRESS"])
        ).count()
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤
        total_clients = session.query(User).count()
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π
        total_drivers = session.query(Driver).filter(Driver.is_approved == True).count()
        
        # –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞—Ä–∞–±–æ—Ç–∫–∞
        total_earnings = session.query(func.sum(Order.price)).filter(Order.status == "COMPLETED").scalar() or 0
        
        # –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏
        avg_price = session.query(func.avg(Order.price)).filter(Order.status == "COMPLETED").scalar() or 0
        
        # –ó–∞–∫–∞–∑—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today = datetime.datetime.utcnow().date()
        start_of_day = datetime.datetime.combine(today, datetime.time.min)
        orders_today = session.query(Order).filter(Order.created_at >= start_of_day).count()
        
        # –ó–∞–∫–∞–∑—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        start_of_month = datetime.datetime(today.year, today.month, 1)
        orders_month = session.query(Order).filter(Order.created_at >= start_of_month).count()
        
        session.close()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats_text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        stats_text += f"<b>–ó–∞–∫–∞–∑—ã:</b>\n"
        stats_text += f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
        stats_text += f"–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {completed_orders}\n"
        stats_text += f"–û—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö: {cancelled_orders}\n"
        stats_text += f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_orders}\n"
        stats_text += f"–ó–∞ —Å–µ–≥–æ–¥–Ω—è: {orders_today}\n"
        stats_text += f"–ó–∞ –º–µ—Å—è—Ü: {orders_month}\n\n"
        
        stats_text += f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
        stats_text += f"–ö–ª–∏–µ–Ω—Ç–æ–≤: {total_clients}\n"
        stats_text += f"–í–æ–¥–∏—Ç–µ–ª–µ–π: {total_drivers}\n\n"
        
        stats_text += f"<b>–§–∏–Ω–∞–Ω—Å—ã:</b>\n"
        stats_text += f"–û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_earnings:.2f} —Ä—É–±.\n"
        stats_text += f"–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏: {avg_price:.2f} —Ä—É–±.\n"
        
        bot.send_message(
            message.chat.id,
            stats_text,
            parse_mode="HTML",
            reply_markup=get_admin_keyboard()
        )
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("complete_order:"))
    def complete_order_callback(call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–º"""
        parts = call.data.split(":")
        if len(parts) != 2:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
        
        order_id = int(parts[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ
        session = Session()
        order = session.query(Order).filter(Order.id == order_id).first()
        
        if not order:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            session.close()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ —ç—Ç–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
        driver = session.query(Driver).filter(Driver.user_id == call.from_user.id).first()
        
        if not driver or driver.id != order.driver_id:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ –≤–∞—Å")
            session.close()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        order.status = "COMPLETED"
        order.completed_at = datetime.datetime.utcnow()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–¥–∏—Ç–µ–ª—è
        driver.status = "ON_DUTY"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞—Ä–∞–±–æ—Ç–∫–µ
        earning = Earning(
            driver_id=driver.id,
            order_id=order.id,
            amount=order.price
        )
        
        session.add(earning)
        session.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        client = session.query(User).filter(User.id == order.client_id).first()
        client_id = client.user_id if client else None
        
        session.close()
        
        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        bot.edit_message_reply_markup(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=None
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è
        bot.send_message(
            call.message.chat.id,
            f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.\n"
            f"–°—É–º–º–∞ {order.price} —Ä—É–±. –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –≤–∞—à–µ–º—É –∑–∞—Ä–∞–±–æ—Ç–∫—É.",
            reply_markup=get_driver_keyboard()
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ü–µ–Ω–∏—Ç—å –ø–æ–µ–∑–¥–∫—É
        if client_id:
            from app.keyboards import get_rating_keyboard
            
            client_text = f"‚úÖ <b>–ü–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
            client_text += f"–ó–∞–∫–∞–∑ #{order_id} –≤—ã–ø–æ–ª–Ω–µ–Ω.\n"
            client_text += f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!\n\n"
            client_text += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –ø–æ–µ–∑–¥–∫—É:"
            
            bot.send_message(
                client_id,
                client_text,
                parse_mode="HTML",
                reply_markup=get_rating_keyboard(order_id)
            )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        bot.send_message(
            ADMIN_ID,
            f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –∑–∞–≤–µ—Ä—à–µ–Ω –≤–æ–¥–∏—Ç–µ–ª–µ–º {driver.first_name} ({driver.car_number}).\n"
            f"–°—É–º–º–∞: {order.price} —Ä—É–±."
        )
